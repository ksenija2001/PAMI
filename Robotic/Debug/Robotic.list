
Robotic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b80  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08003d18  08003d18  00013d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f00  08003f00  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08003f00  08003f00  00013f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f08  08003f08  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f08  08003f08  00013f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f0c  08003f0c  00013f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08003f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000028  08003f38  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003f38  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   000055c9  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015f5  00000000  00000000  00025664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000530  00000000  00000000  00026c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003bb  00000000  00000000  00027190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b5e  00000000  00000000  0002754b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006be6  00000000  00000000  0003d0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008331b  00000000  00000000  00043c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000016bc  00000000  00000000  000c6fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c8668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003d00 	.word	0x08003d00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	08003d00 	.word	0x08003d00

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2iz>:
 80008b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008bc:	d215      	bcs.n	80008ea <__aeabi_d2iz+0x36>
 80008be:	d511      	bpl.n	80008e4 <__aeabi_d2iz+0x30>
 80008c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c8:	d912      	bls.n	80008f0 <__aeabi_d2iz+0x3c>
 80008ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008da:	fa23 f002 	lsr.w	r0, r3, r2
 80008de:	bf18      	it	ne
 80008e0:	4240      	negne	r0, r0
 80008e2:	4770      	bx	lr
 80008e4:	f04f 0000 	mov.w	r0, #0
 80008e8:	4770      	bx	lr
 80008ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ee:	d105      	bne.n	80008fc <__aeabi_d2iz+0x48>
 80008f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008f4:	bf08      	it	eq
 80008f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008fa:	4770      	bx	lr
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop

08000904 <__aeabi_d2f>:
 8000904:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000908:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800090c:	bf24      	itt	cs
 800090e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000912:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000916:	d90d      	bls.n	8000934 <__aeabi_d2f+0x30>
 8000918:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800091c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000920:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000924:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000928:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800092c:	bf08      	it	eq
 800092e:	f020 0001 	biceq.w	r0, r0, #1
 8000932:	4770      	bx	lr
 8000934:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000938:	d121      	bne.n	800097e <__aeabi_d2f+0x7a>
 800093a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800093e:	bfbc      	itt	lt
 8000940:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000944:	4770      	bxlt	lr
 8000946:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800094e:	f1c2 0218 	rsb	r2, r2, #24
 8000952:	f1c2 0c20 	rsb	ip, r2, #32
 8000956:	fa10 f30c 	lsls.w	r3, r0, ip
 800095a:	fa20 f002 	lsr.w	r0, r0, r2
 800095e:	bf18      	it	ne
 8000960:	f040 0001 	orrne.w	r0, r0, #1
 8000964:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000968:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800096c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000970:	ea40 000c 	orr.w	r0, r0, ip
 8000974:	fa23 f302 	lsr.w	r3, r3, r2
 8000978:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800097c:	e7cc      	b.n	8000918 <__aeabi_d2f+0x14>
 800097e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000982:	d107      	bne.n	8000994 <__aeabi_d2f+0x90>
 8000984:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000988:	bf1e      	ittt	ne
 800098a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800098e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000992:	4770      	bxne	lr
 8000994:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009b8:	f000 b970 	b.w	8000c9c <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	460d      	mov	r5, r1
 80009dc:	4604      	mov	r4, r0
 80009de:	460f      	mov	r7, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d14a      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4694      	mov	ip, r2
 80009e8:	d965      	bls.n	8000ab6 <__udivmoddi4+0xe2>
 80009ea:	fab2 f382 	clz	r3, r2
 80009ee:	b143      	cbz	r3, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f4:	f1c3 0220 	rsb	r2, r3, #32
 80009f8:	409f      	lsls	r7, r3
 80009fa:	fa20 f202 	lsr.w	r2, r0, r2
 80009fe:	4317      	orrs	r7, r2
 8000a00:	409c      	lsls	r4, r3
 8000a02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a06:	fa1f f58c 	uxth.w	r5, ip
 8000a0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a0e:	0c22      	lsrs	r2, r4, #16
 8000a10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a18:	fb01 f005 	mul.w	r0, r1, r5
 8000a1c:	4290      	cmp	r0, r2
 8000a1e:	d90a      	bls.n	8000a36 <__udivmoddi4+0x62>
 8000a20:	eb1c 0202 	adds.w	r2, ip, r2
 8000a24:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000a28:	f080 811c 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	f240 8119 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a32:	3902      	subs	r1, #2
 8000a34:	4462      	add	r2, ip
 8000a36:	1a12      	subs	r2, r2, r0
 8000a38:	b2a4      	uxth	r4, r4
 8000a3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a46:	fb00 f505 	mul.w	r5, r0, r5
 8000a4a:	42a5      	cmp	r5, r4
 8000a4c:	d90a      	bls.n	8000a64 <__udivmoddi4+0x90>
 8000a4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a52:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a56:	f080 8107 	bcs.w	8000c68 <__udivmoddi4+0x294>
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	f240 8104 	bls.w	8000c68 <__udivmoddi4+0x294>
 8000a60:	4464      	add	r4, ip
 8000a62:	3802      	subs	r0, #2
 8000a64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a68:	1b64      	subs	r4, r4, r5
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	b11e      	cbz	r6, 8000a76 <__udivmoddi4+0xa2>
 8000a6e:	40dc      	lsrs	r4, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	e9c6 4300 	strd	r4, r3, [r6]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0xbc>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80ed 	beq.w	8000c5e <__udivmoddi4+0x28a>
 8000a84:	2100      	movs	r1, #0
 8000a86:	e9c6 0500 	strd	r0, r5, [r6]
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a90:	fab3 f183 	clz	r1, r3
 8000a94:	2900      	cmp	r1, #0
 8000a96:	d149      	bne.n	8000b2c <__udivmoddi4+0x158>
 8000a98:	42ab      	cmp	r3, r5
 8000a9a:	d302      	bcc.n	8000aa2 <__udivmoddi4+0xce>
 8000a9c:	4282      	cmp	r2, r0
 8000a9e:	f200 80f8 	bhi.w	8000c92 <__udivmoddi4+0x2be>
 8000aa2:	1a84      	subs	r4, r0, r2
 8000aa4:	eb65 0203 	sbc.w	r2, r5, r3
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	4617      	mov	r7, r2
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d0e2      	beq.n	8000a76 <__udivmoddi4+0xa2>
 8000ab0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ab4:	e7df      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000ab6:	b902      	cbnz	r2, 8000aba <__udivmoddi4+0xe6>
 8000ab8:	deff      	udf	#255	; 0xff
 8000aba:	fab2 f382 	clz	r3, r2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 8090 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac4:	1a8a      	subs	r2, r1, r2
 8000ac6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aca:	fa1f fe8c 	uxth.w	lr, ip
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ad4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ad8:	0c22      	lsrs	r2, r4, #16
 8000ada:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ade:	fb0e f005 	mul.w	r0, lr, r5
 8000ae2:	4290      	cmp	r0, r2
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae6:	eb1c 0202 	adds.w	r2, ip, r2
 8000aea:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4290      	cmp	r0, r2
 8000af2:	f200 80cb 	bhi.w	8000c8c <__udivmoddi4+0x2b8>
 8000af6:	4645      	mov	r5, r8
 8000af8:	1a12      	subs	r2, r2, r0
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b00:	fb07 2210 	mls	r2, r7, r0, r2
 8000b04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b08:	fb0e fe00 	mul.w	lr, lr, r0
 8000b0c:	45a6      	cmp	lr, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x14e>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b18:	d202      	bcs.n	8000b20 <__udivmoddi4+0x14c>
 8000b1a:	45a6      	cmp	lr, r4
 8000b1c:	f200 80bb 	bhi.w	8000c96 <__udivmoddi4+0x2c2>
 8000b20:	4610      	mov	r0, r2
 8000b22:	eba4 040e 	sub.w	r4, r4, lr
 8000b26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b2a:	e79f      	b.n	8000a6c <__udivmoddi4+0x98>
 8000b2c:	f1c1 0720 	rsb	r7, r1, #32
 8000b30:	408b      	lsls	r3, r1
 8000b32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b42:	40fd      	lsrs	r5, r7
 8000b44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b48:	4323      	orrs	r3, r4
 8000b4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b4e:	fa1f fe8c 	uxth.w	lr, ip
 8000b52:	fb09 5518 	mls	r5, r9, r8, r5
 8000b56:	0c1c      	lsrs	r4, r3, #16
 8000b58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b60:	42a5      	cmp	r5, r4
 8000b62:	fa02 f201 	lsl.w	r2, r2, r1
 8000b66:	fa00 f001 	lsl.w	r0, r0, r1
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b70:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b74:	f080 8088 	bcs.w	8000c88 <__udivmoddi4+0x2b4>
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	f240 8085 	bls.w	8000c88 <__udivmoddi4+0x2b4>
 8000b7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b82:	4464      	add	r4, ip
 8000b84:	1b64      	subs	r4, r4, r5
 8000b86:	b29d      	uxth	r5, r3
 8000b88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000b90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b98:	45a6      	cmp	lr, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ba4:	d26c      	bcs.n	8000c80 <__udivmoddi4+0x2ac>
 8000ba6:	45a6      	cmp	lr, r4
 8000ba8:	d96a      	bls.n	8000c80 <__udivmoddi4+0x2ac>
 8000baa:	3b02      	subs	r3, #2
 8000bac:	4464      	add	r4, ip
 8000bae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bb6:	eba4 040e 	sub.w	r4, r4, lr
 8000bba:	42ac      	cmp	r4, r5
 8000bbc:	46c8      	mov	r8, r9
 8000bbe:	46ae      	mov	lr, r5
 8000bc0:	d356      	bcc.n	8000c70 <__udivmoddi4+0x29c>
 8000bc2:	d053      	beq.n	8000c6c <__udivmoddi4+0x298>
 8000bc4:	b156      	cbz	r6, 8000bdc <__udivmoddi4+0x208>
 8000bc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bca:	eb64 040e 	sbc.w	r4, r4, lr
 8000bce:	fa04 f707 	lsl.w	r7, r4, r7
 8000bd2:	40ca      	lsrs	r2, r1
 8000bd4:	40cc      	lsrs	r4, r1
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be4:	f1c3 0120 	rsb	r1, r3, #32
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	fa20 f201 	lsr.w	r2, r0, r1
 8000bf0:	fa25 f101 	lsr.w	r1, r5, r1
 8000bf4:	409d      	lsls	r5, r3
 8000bf6:	432a      	orrs	r2, r5
 8000bf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c04:	fb07 1510 	mls	r5, r7, r0, r1
 8000c08:	0c11      	lsrs	r1, r2, #16
 8000c0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c12:	428d      	cmp	r5, r1
 8000c14:	fa04 f403 	lsl.w	r4, r4, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x258>
 8000c1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c22:	d22f      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c24:	428d      	cmp	r5, r1
 8000c26:	d92d      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1b49      	subs	r1, r1, r5
 8000c2e:	b292      	uxth	r2, r2
 8000c30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c34:	fb07 1115 	mls	r1, r7, r5, r1
 8000c38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c40:	4291      	cmp	r1, r2
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x282>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c4c:	d216      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000c4e:	4291      	cmp	r1, r2
 8000c50:	d914      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000c52:	3d02      	subs	r5, #2
 8000c54:	4462      	add	r2, ip
 8000c56:	1a52      	subs	r2, r2, r1
 8000c58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c5c:	e738      	b.n	8000ad0 <__udivmoddi4+0xfc>
 8000c5e:	4631      	mov	r1, r6
 8000c60:	4630      	mov	r0, r6
 8000c62:	e708      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000c64:	4639      	mov	r1, r7
 8000c66:	e6e6      	b.n	8000a36 <__udivmoddi4+0x62>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	e6fb      	b.n	8000a64 <__udivmoddi4+0x90>
 8000c6c:	4548      	cmp	r0, r9
 8000c6e:	d2a9      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c70:	ebb9 0802 	subs.w	r8, r9, r2
 8000c74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	e7a3      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7c:	4645      	mov	r5, r8
 8000c7e:	e7ea      	b.n	8000c56 <__udivmoddi4+0x282>
 8000c80:	462b      	mov	r3, r5
 8000c82:	e794      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c84:	4640      	mov	r0, r8
 8000c86:	e7d1      	b.n	8000c2c <__udivmoddi4+0x258>
 8000c88:	46d0      	mov	r8, sl
 8000c8a:	e77b      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8c:	3d02      	subs	r5, #2
 8000c8e:	4462      	add	r2, ip
 8000c90:	e732      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c92:	4608      	mov	r0, r1
 8000c94:	e70a      	b.n	8000aac <__udivmoddi4+0xd8>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	e742      	b.n	8000b22 <__udivmoddi4+0x14e>

08000c9c <__aeabi_idiv0>:
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca4:	f001 f82c 	bl	8001d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca8:	f000 f816 	bl	8000cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cac:	f000 f87e 	bl	8000dac <MX_GPIO_Init>
  USART2_Init();
 8000cb0:	f000 fe8e 	bl	80019d0 <USART2_Init>
  UART_Interrupt_Init();
 8000cb4:	f000 ff06 	bl	8001ac4 <UART_Interrupt_Init>
  PID_Odom_Interrupt_Init();
 8000cb8:	f000 fa46 	bl	8001148 <PID_Odom_Interrupt_Init>
  Motors_Init();
 8000cbc:	f000 f976 	bl	8000fac <Motors_Init>
  Encoders_Init();
 8000cc0:	f000 fb52 	bl	8001368 <Encoders_Init>

   Set_Motor_Direction(1, -1);
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f000 fac7 	bl	800125c <Set_Motor_Direction>
   Set_Motor_PWM(0, 0);
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 fb03 	bl	80012dc <Set_Motor_PWM>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <main+0x36>

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b094      	sub	sp, #80	; 0x50
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0320 	add.w	r3, r7, #32
 8000ce2:	2230      	movs	r2, #48	; 0x30
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 ff4a 	bl	8002b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <SystemClock_Config+0xcc>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	4a27      	ldr	r2, [pc, #156]	; (8000da4 <SystemClock_Config+0xcc>)
 8000d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0c:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <SystemClock_Config+0xcc>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <SystemClock_Config+0xd0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a21      	ldr	r2, [pc, #132]	; (8000da8 <SystemClock_Config+0xd0>)
 8000d22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <SystemClock_Config+0xd0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d34:	2302      	movs	r3, #2
 8000d36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3c:	2310      	movs	r3, #16
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d40:	2302      	movs	r3, #2
 8000d42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d44:	2300      	movs	r3, #0
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d48:	2310      	movs	r3, #16
 8000d4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d52:	2304      	movs	r3, #4
 8000d54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d56:	2304      	movs	r3, #4
 8000d58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5a:	f107 0320 	add.w	r3, r7, #32
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 faaa 	bl	80022b8 <HAL_RCC_OscConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d6a:	f000 f879 	bl	8000e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6e:	230f      	movs	r3, #15
 8000d70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d72:	2302      	movs	r3, #2
 8000d74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2102      	movs	r1, #2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 fd0c 	bl	80027a8 <HAL_RCC_ClockConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d96:	f000 f863 	bl	8000e60 <Error_Handler>
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3750      	adds	r7, #80	; 0x50
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40007000 	.word	0x40007000

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_GPIO_Init+0xac>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <MX_GPIO_Init+0xac>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_GPIO_Init+0xac>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_GPIO_Init+0xac>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <MX_GPIO_Init+0xac>)
 8000de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_GPIO_Init+0xac>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_GPIO_Init+0xac>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <MX_GPIO_Init+0xac>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_GPIO_Init+0xac>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_GPIO_Init+0xac>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <MX_GPIO_Init+0xac>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_GPIO_Init+0xac>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e38:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_GPIO_Init+0xb0>)
 8000e4a:	f001 f8b1 	bl	8001fb0 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	; 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020800 	.word	0x40020800

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <Error_Handler+0x8>
	...

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <Motors_Init>:


// TIM2 CH1 and CH2 configuration as PWM output
// Driver direction pins configuration
void Motors_Init()
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
	// Enabe GPIOA (PWM port) clock source
	RCC->AHB1ENR |= ( RCC_AHB1ENR_GPIOAEN );
 8000fb0:	4b61      	ldr	r3, [pc, #388]	; (8001138 <Motors_Init+0x18c>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	4a60      	ldr	r2, [pc, #384]	; (8001138 <Motors_Init+0x18c>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6313      	str	r3, [r2, #48]	; 0x30

	// Enable TIM2 (PWM source) clock source - 84Mhz
	RCC->APB1ENR |= ( RCC_APB1ENR_TIM2EN );
 8000fbc:	4b5e      	ldr	r3, [pc, #376]	; (8001138 <Motors_Init+0x18c>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	4a5d      	ldr	r2, [pc, #372]	; (8001138 <Motors_Init+0x18c>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6413      	str	r3, [r2, #64]	; 0x40

	// Set TIM2 channel pins PA0 (CH1) and PA1 (CH2)
	// to alternate function mode AF1
	PWM_Port->MODER &= ~(0b11 << 2*PWMA_Pin | 0b11 << 2*PWMB_Pin);
 8000fc8:	4b5c      	ldr	r3, [pc, #368]	; (800113c <Motors_Init+0x190>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a5b      	ldr	r2, [pc, #364]	; (800113c <Motors_Init+0x190>)
 8000fce:	f023 030f 	bic.w	r3, r3, #15
 8000fd2:	6013      	str	r3, [r2, #0]
	PWM_Port->MODER |=  (0b10 << 2*PWMA_Pin | 0b10 << 2*PWMB_Pin);
 8000fd4:	4b59      	ldr	r3, [pc, #356]	; (800113c <Motors_Init+0x190>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a58      	ldr	r2, [pc, #352]	; (800113c <Motors_Init+0x190>)
 8000fda:	f043 030a 	orr.w	r3, r3, #10
 8000fde:	6013      	str	r3, [r2, #0]

	PWM_Port->AFR[0] &= ~(0b1111 << 4*PWMA_Pin | 0b1111 << 4*PWMB_Pin);
 8000fe0:	4b56      	ldr	r3, [pc, #344]	; (800113c <Motors_Init+0x190>)
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	4a55      	ldr	r2, [pc, #340]	; (800113c <Motors_Init+0x190>)
 8000fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fea:	6213      	str	r3, [r2, #32]
	PWM_Port->AFR[0] |=  (0b0001 << 4*PWMA_Pin | 0b0001 << 4*PWMB_Pin);
 8000fec:	4b53      	ldr	r3, [pc, #332]	; (800113c <Motors_Init+0x190>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	4a52      	ldr	r2, [pc, #328]	; (800113c <Motors_Init+0x190>)
 8000ff2:	f043 0311 	orr.w	r3, r3, #17
 8000ff6:	6213      	str	r3, [r2, #32]

	// Autoreload value determines the frequency of
	// the PWM signal - 84MHz -> 20kHz
	PWM_Tim->PSC = 1 - 1;
 8000ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	629a      	str	r2, [r3, #40]	; 0x28
	PWM_Tim->ARR = PWM_ARR;
 8001000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001004:	f241 0267 	movw	r2, #4199	; 0x1067
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c

	// PWM mode 1 - channel is active as long as
	// TIM2->CNT < TIM2->CCR1 - during the timer period
	PWM_Tim->CCMR1 &= ~(0b111 << TIM_CCMR1_OC1M_Pos | 0b111 << TIM_CCMR1_OC2M_Pos);
 800100a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800101c:	6193      	str	r3, [r2, #24]
	PWM_Tim->CCMR1 |=  (0b110 << TIM_CCMR1_OC1M_Pos | 0b110 << TIM_CCMR1_OC2M_Pos);
 800101e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001028:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800102c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001030:	6193      	str	r3, [r2, #24]

	// Enable preload for TIM2
	PWM_Tim->CCMR1 |= (0b1 << TIM_CCMR1_OC1PE_Pos | 0b1 << TIM_CCMR1_OC2PE_Pos);
 8001032:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	6193      	str	r3, [r2, #24]

	// Enable autoreload for TIM2
	PWM_Tim->CR1 |= (0b1 << TIM_CR1_ARPE_Pos);
 8001046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001054:	6013      	str	r3, [r2, #0]

	// Enable automatic update of registers
	PWM_Tim->EGR |= (0b1 << TIM_EGR_UG_Pos);
 8001056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6153      	str	r3, [r2, #20]

	// Enable capture/compare as output
	// (PWM output to driver) for CH1 and CH2
	// Default falling edge mode
	PWM_Tim->CCER |= (0b1 << TIM_CCER_CC1E_Pos | 0b1 << TIM_CCER_CC2E_Pos);
 8001066:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001070:	f043 0311 	orr.w	r3, r3, #17
 8001074:	6213      	str	r3, [r2, #32]

	// Enable PWM generation in default edge aligned mode
	PWM_Tim->CR1 |= (0b1 << TIM_CR1_CEN_Pos);
 8001076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6013      	str	r3, [r2, #0]



	// Enable GPIOB and GPIOC clock source
	// (GPIOA is enabled above)
	RCC->AHB1ENR |= ( RCC_AHB1ENR_GPIOBEN );
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <Motors_Init+0x18c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a2b      	ldr	r2, [pc, #172]	; (8001138 <Motors_Init+0x18c>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= ( RCC_AHB1ENR_GPIOCEN );
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <Motors_Init+0x18c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a28      	ldr	r2, [pc, #160]	; (8001138 <Motors_Init+0x18c>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure pins for driver direction as
	// general purpose output pins
	BI2_Port->MODER &= ~(0b11 << 2*BI2_Pin);
 800109e:	4b28      	ldr	r3, [pc, #160]	; (8001140 <Motors_Init+0x194>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a27      	ldr	r2, [pc, #156]	; (8001140 <Motors_Init+0x194>)
 80010a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80010a8:	6013      	str	r3, [r2, #0]
	BI2_Port->MODER |=  (0b01 << 2*BI2_Pin);
 80010aa:	4b25      	ldr	r3, [pc, #148]	; (8001140 <Motors_Init+0x194>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a24      	ldr	r2, [pc, #144]	; (8001140 <Motors_Init+0x194>)
 80010b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010b4:	6013      	str	r3, [r2, #0]

	BI1_Port->MODER &= ~(0b11 << 2*BI1_Pin);
 80010b6:	4b23      	ldr	r3, [pc, #140]	; (8001144 <Motors_Init+0x198>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a22      	ldr	r2, [pc, #136]	; (8001144 <Motors_Init+0x198>)
 80010bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010c0:	6013      	str	r3, [r2, #0]
	BI1_Port->MODER |=  (0b01 << 2*BI1_Pin);
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <Motors_Init+0x198>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <Motors_Init+0x198>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6013      	str	r3, [r2, #0]

	AI1_Port->MODER &= ~(0b11 << 2*AI1_Pin);
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <Motors_Init+0x194>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <Motors_Init+0x194>)
 80010d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010d8:	6013      	str	r3, [r2, #0]
	AI1_Port->MODER |=  (0b01 << 2*AI1_Pin);
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <Motors_Init+0x194>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a18      	ldr	r2, [pc, #96]	; (8001140 <Motors_Init+0x194>)
 80010e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e4:	6013      	str	r3, [r2, #0]

	AI2_Port->MODER &= ~(0b11 << 2*AI2_Pin);
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <Motors_Init+0x190>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a14      	ldr	r2, [pc, #80]	; (800113c <Motors_Init+0x190>)
 80010ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80010f0:	6013      	str	r3, [r2, #0]
	AI2_Port->MODER |=  (0b01 << 2*AI2_Pin);
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <Motors_Init+0x190>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a11      	ldr	r2, [pc, #68]	; (800113c <Motors_Init+0x190>)
 80010f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fc:	6013      	str	r3, [r2, #0]

	// Configure pins for driver direction as
	// output push pull (reset state)
	BI2_Port->OTYPER &=  ~(0b1 << BI2_Pin);
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <Motors_Init+0x194>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <Motors_Init+0x194>)
 8001104:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001108:	6053      	str	r3, [r2, #4]

	BI1_Port->OTYPER &=  ~(0b1 << BI1_Pin);
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <Motors_Init+0x198>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <Motors_Init+0x198>)
 8001110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001114:	6053      	str	r3, [r2, #4]

	AI1_Port->OTYPER &=  ~(0b1 << AI1_Pin);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <Motors_Init+0x194>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4a09      	ldr	r2, [pc, #36]	; (8001140 <Motors_Init+0x194>)
 800111c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001120:	6053      	str	r3, [r2, #4]

	AI2_Port->OTYPER &=  ~(0b1 << AI2_Pin);
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <Motors_Init+0x190>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <Motors_Init+0x190>)
 8001128:	f023 0320 	bic.w	r3, r3, #32
 800112c:	6053      	str	r3, [r2, #4]
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40023800 	.word	0x40023800
 800113c:	40020000 	.word	0x40020000
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800

08001148 <PID_Odom_Interrupt_Init>:

// Configures timer TIM11 with interrupt every 10ms which executes
// PID computation and updates odometry data
void PID_Odom_Interrupt_Init()
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	// Lower priority than UART IRQHandler and UART buffer checking
	uint32_t tim10_pri_encoding = NVIC_EncodePriority(0, 1, 2);
 800114e:	2202      	movs	r2, #2
 8001150:	2101      	movs	r1, #1
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff fef6 	bl	8000f44 <NVIC_EncodePriority>
 8001158:	6078      	str	r0, [r7, #4]

	// Clock source for TIM10
	RCC->APB2ENR |= ( RCC_APB2ENR_TIM10EN );
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <PID_Odom_Interrupt_Init+0x6c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <PID_Odom_Interrupt_Init+0x6c>)
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44

	// Clock setup for TIM10, 10ms
	PID_ODOM_Tim->PSC = 11;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <PID_Odom_Interrupt_Init+0x70>)
 8001168:	220b      	movs	r2, #11
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
	PID_ODOM_Tim->ARR = 60000 - 1;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <PID_Odom_Interrupt_Init+0x70>)
 800116e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable immediate update of register on counter
	PID_ODOM_Tim->EGR |= ( TIM_EGR_UG );
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <PID_Odom_Interrupt_Init+0x70>)
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <PID_Odom_Interrupt_Init+0x70>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6153      	str	r3, [r2, #20]

	// Enable interrupts for TIM10
	PID_ODOM_Tim->DIER |= ( TIM_DIER_UIE );
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <PID_Odom_Interrupt_Init+0x70>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <PID_Odom_Interrupt_Init+0x70>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	60d3      	str	r3, [r2, #12]

	// Enable counter for TIM10
	PID_ODOM_Tim->CR1 |= ( TIM_CR1_CEN );
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <PID_Odom_Interrupt_Init+0x70>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <PID_Odom_Interrupt_Init+0x70>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6013      	str	r3, [r2, #0]

	// Setup the NVIC to enable interrupts.
	NVIC_SetPriorityGrouping( 0 );
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fe67 	bl	8000e6c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority( TIM1_UP_TIM10_IRQn, tim10_pri_encoding );
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	2019      	movs	r0, #25
 80011a2:	f7ff fea5 	bl	8000ef0 <__NVIC_SetPriority>
	NVIC_EnableIRQ( TIM1_UP_TIM10_IRQn );
 80011a6:	2019      	movs	r0, #25
 80011a8:	f7ff fe84 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40014400 	.word	0x40014400

080011bc <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{;
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	interrupt_counter++;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <TIM1_UP_TIM10_IRQHandler+0x84>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a1e      	ldr	r2, [pc, #120]	; (8001240 <TIM1_UP_TIM10_IRQHandler+0x84>)
 80011c8:	6013      	str	r3, [r2, #0]

	// Calculates new position and orientation based on encoder output
	// and sends odometry data via UART
	if( interrupt_counter % ODOM_TIME == 0){
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <TIM1_UP_TIM10_IRQHandler+0x84>)
 80011cc:	6819      	ldr	r1, [r3, #0]
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <TIM1_UP_TIM10_IRQHandler+0x88>)
 80011d0:	fba3 2301 	umull	r2, r3, r3, r1
 80011d4:	091a      	lsrs	r2, r3, #4
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	1aca      	subs	r2, r1, r3
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	d115      	bne.n	8001210 <TIM1_UP_TIM10_IRQHandler+0x54>
		Send_Byte('2');
 80011e4:	2032      	movs	r0, #50	; 0x32
 80011e6:	f000 fccd 	bl	8001b84 <Send_Byte>
		Read_Encoders();
 80011ea:	f000 f961 	bl	80014b0 <Read_Encoders>

		odom[0] = x;
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <TIM1_UP_TIM10_IRQHandler+0x8c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a16      	ldr	r2, [pc, #88]	; (800124c <TIM1_UP_TIM10_IRQHandler+0x90>)
 80011f4:	6013      	str	r3, [r2, #0]
		odom[1] = y;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <TIM1_UP_TIM10_IRQHandler+0x94>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a14      	ldr	r2, [pc, #80]	; (800124c <TIM1_UP_TIM10_IRQHandler+0x90>)
 80011fc:	6053      	str	r3, [r2, #4]
		odom[2] = theta;
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <TIM1_UP_TIM10_IRQHandler+0x98>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <TIM1_UP_TIM10_IRQHandler+0x90>)
 8001204:	6093      	str	r3, [r2, #8]
		Send_Command(ODOM_TRANSMIT, odom, sizeof(odom));
 8001206:	220c      	movs	r2, #12
 8001208:	4910      	ldr	r1, [pc, #64]	; (800124c <TIM1_UP_TIM10_IRQHandler+0x90>)
 800120a:	204f      	movs	r0, #79	; 0x4f
 800120c:	f000 fcf4 	bl	8001bf8 <Send_Command>
	}

	// Calculates speed loop PID and sends the output to the driver
	if( interrupt_counter % PID_TIME == 0){
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8001212:	6819      	ldr	r1, [r3, #0]
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8001216:	fba3 2301 	umull	r2, r3, r3, r1
 800121a:	095a      	lsrs	r2, r3, #5
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	1aca      	subs	r2, r1, r3
 8001226:	2a00      	cmp	r2, #0
 8001228:	d102      	bne.n	8001230 <TIM1_UP_TIM10_IRQHandler+0x74>
		Send_Byte('4');
 800122a:	2034      	movs	r0, #52	; 0x34
 800122c:	f000 fcaa 	bl	8001b84 <Send_Byte>
		// Speed_Loop();
	}

	// Clears interrupt flag so that other interrupts can work
	PID_ODOM_Tim->SR &= ~TIM_SR_UIF;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <TIM1_UP_TIM10_IRQHandler+0x9c>)
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	4a08      	ldr	r2, [pc, #32]	; (8001258 <TIM1_UP_TIM10_IRQHandler+0x9c>)
 8001236:	f023 0301 	bic.w	r3, r3, #1
 800123a:	6113      	str	r3, [r2, #16]
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000044 	.word	0x20000044
 8001244:	cccccccd 	.word	0xcccccccd
 8001248:	20000070 	.word	0x20000070
 800124c:	20000048 	.word	0x20000048
 8001250:	20000074 	.word	0x20000074
 8001254:	20000000 	.word	0x20000000
 8001258:	40014400 	.word	0x40014400

0800125c <Set_Motor_Direction>:
	Set_Motor_PWM(abs(left_PWM), abs(right_PWM));
}

// Changes motor direction based on sign of received speeds
void Set_Motor_Direction(int left, int right)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	if (left < 0){ // counter clockwise
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	da0a      	bge.n	8001282 <Set_Motor_Direction+0x26>
		Set_Pin(AI1_Port, AI1_Pin, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2106      	movs	r1, #6
 8001270:	4817      	ldr	r0, [pc, #92]	; (80012d0 <Set_Motor_Direction+0x74>)
 8001272:	f000 f856 	bl	8001322 <Set_Pin>
		Set_Pin(AI2_Port, AI2_Pin, 1);
 8001276:	2201      	movs	r2, #1
 8001278:	2105      	movs	r1, #5
 800127a:	4816      	ldr	r0, [pc, #88]	; (80012d4 <Set_Motor_Direction+0x78>)
 800127c:	f000 f851 	bl	8001322 <Set_Pin>
 8001280:	e009      	b.n	8001296 <Set_Motor_Direction+0x3a>
	}
	else{ // clockwise
		Set_Pin(AI1_Port, AI1_Pin, 1);
 8001282:	2201      	movs	r2, #1
 8001284:	2106      	movs	r1, #6
 8001286:	4812      	ldr	r0, [pc, #72]	; (80012d0 <Set_Motor_Direction+0x74>)
 8001288:	f000 f84b 	bl	8001322 <Set_Pin>
		Set_Pin(AI2_Port, AI2_Pin, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2105      	movs	r1, #5
 8001290:	4810      	ldr	r0, [pc, #64]	; (80012d4 <Set_Motor_Direction+0x78>)
 8001292:	f000 f846 	bl	8001322 <Set_Pin>
	}

	if (right < 0){ // counter clockwise
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	da0a      	bge.n	80012b2 <Set_Motor_Direction+0x56>
		Set_Pin(BI1_Port, BI1_Pin, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2107      	movs	r1, #7
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <Set_Motor_Direction+0x7c>)
 80012a2:	f000 f83e 	bl	8001322 <Set_Pin>
		Set_Pin(BI2_Port, BI2_Pin, 1);
 80012a6:	2201      	movs	r2, #1
 80012a8:	210a      	movs	r1, #10
 80012aa:	4809      	ldr	r0, [pc, #36]	; (80012d0 <Set_Motor_Direction+0x74>)
 80012ac:	f000 f839 	bl	8001322 <Set_Pin>
	}
	else{ // clockwise
		Set_Pin(BI1_Port, BI1_Pin, 1);
		Set_Pin(BI2_Port, BI2_Pin, 0);
	}
}
 80012b0:	e009      	b.n	80012c6 <Set_Motor_Direction+0x6a>
		Set_Pin(BI1_Port, BI1_Pin, 1);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2107      	movs	r1, #7
 80012b6:	4808      	ldr	r0, [pc, #32]	; (80012d8 <Set_Motor_Direction+0x7c>)
 80012b8:	f000 f833 	bl	8001322 <Set_Pin>
		Set_Pin(BI2_Port, BI2_Pin, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	210a      	movs	r1, #10
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <Set_Motor_Direction+0x74>)
 80012c2:	f000 f82e 	bl	8001322 <Set_Pin>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020800 	.word	0x40020800

080012dc <Set_Motor_PWM>:

// Sets motor PWM value caclulated in speed loop
void Set_Motor_PWM(unsigned int left, unsigned int right)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	// CCR1 value determines the duty cycle of the
	// PWM signal, min - 0, max - PWM_ARR
	if (left > PWM_ARR) left = PWM_ARR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f241 0267 	movw	r2, #4199	; 0x1067
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d902      	bls.n	80012f6 <Set_Motor_PWM+0x1a>
 80012f0:	f241 0367 	movw	r3, #4199	; 0x1067
 80012f4:	607b      	str	r3, [r7, #4]
	if (right > PWM_ARR) right = PWM_ARR;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f241 0267 	movw	r2, #4199	; 0x1067
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d902      	bls.n	8001306 <Set_Motor_PWM+0x2a>
 8001300:	f241 0367 	movw	r3, #4199	; 0x1067
 8001304:	603b      	str	r3, [r7, #0]

	// TODO check which motor is which
	PWM_Tim->CCR1 = left;
 8001306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6353      	str	r3, [r2, #52]	; 0x34
	PWM_Tim->CCR2 = right;
 800130e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <Set_Pin>:

// Sets or resets a pin
void Set_Pin(GPIO_TypeDef* port, int pin, int value){
 8001322:	b480      	push	{r7}
 8001324:	b085      	sub	sp, #20
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
	if (value > 0) port->BSRR |= (0b1 << pin);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	dd09      	ble.n	8001348 <Set_Pin+0x26>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	2101      	movs	r1, #1
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	fa01 f202 	lsl.w	r2, r1, r2
 8001340:	431a      	orrs	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	619a      	str	r2, [r3, #24]
	else port->BSRR |= (0b1 << (pin + 16));
}
 8001346:	e009      	b.n	800135c <Set_Pin+0x3a>
	else port->BSRR |= (0b1 << (pin + 16));
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	3210      	adds	r2, #16
 8001350:	2101      	movs	r1, #1
 8001352:	fa01 f202 	lsl.w	r2, r1, r2
 8001356:	431a      	orrs	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	619a      	str	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <Encoders_Init>:
volatile float theta = M_PI_2;
volatile float left_speed = 0;
volatile float right_speed = 0;


void Encoders_Init(){
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

	// Enable clock for portTIM3 A
	RCC->AHB1ENR |= ( RCC_AHB1ENR_GPIOAEN );
 800136c:	4b4c      	ldr	r3, [pc, #304]	; (80014a0 <Encoders_Init+0x138>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	4a4b      	ldr	r2, [pc, #300]	; (80014a0 <Encoders_Init+0x138>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6313      	str	r3, [r2, #48]	; 0x30

	// Clock source for TIM3
	RCC->APB1ENR |= ( RCC_APB1ENR_TIM3EN );
 8001378:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <Encoders_Init+0x138>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <Encoders_Init+0x138>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	6413      	str	r3, [r2, #64]	; 0x40

	// Clock source for TIM1
	RCC->APB2ENR |= ( RCC_APB2ENR_TIM1EN );
 8001384:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <Encoders_Init+0x138>)
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	4a45      	ldr	r2, [pc, #276]	; (80014a0 <Encoders_Init+0x138>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6453      	str	r3, [r2, #68]	; 0x44

	// Enable alternate function for PA6-9
	ENC_Port->MODER &= ~(0b11 << 2*ENC_LEFTA_Pin | 0b11 << 2*ENC_LEFTB_Pin | \
 8001390:	4b44      	ldr	r3, [pc, #272]	; (80014a4 <Encoders_Init+0x13c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a43      	ldr	r2, [pc, #268]	; (80014a4 <Encoders_Init+0x13c>)
 8001396:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 800139a:	6013      	str	r3, [r2, #0]
						0b11 << 2*ENC_RIGHTA_Pin | 0b11 << 2*ENC_RIGHTB_Pin);
	ENC_Port->MODER |=  (0b10 << 2*ENC_LEFTA_Pin | 0b10 << 2*ENC_LEFTB_Pin | \
 800139c:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <Encoders_Init+0x13c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a40      	ldr	r2, [pc, #256]	; (80014a4 <Encoders_Init+0x13c>)
 80013a2:	f443 232a 	orr.w	r3, r3, #696320	; 0xaa000
 80013a6:	6013      	str	r3, [r2, #0]
						0b10 << 2*ENC_RIGHTA_Pin | 0b10 << 2*ENC_RIGHTB_Pin);

	// Set AF2 for PA6 and PA7
	ENC_Port->AFR[0] &= ~(0b1111 << 4*ENC_LEFTA_Pin | 0b1111 << 4*ENC_LEFTB_Pin);
 80013a8:	4b3e      	ldr	r3, [pc, #248]	; (80014a4 <Encoders_Init+0x13c>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4a3d      	ldr	r2, [pc, #244]	; (80014a4 <Encoders_Init+0x13c>)
 80013ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80013b2:	6213      	str	r3, [r2, #32]
	ENC_Port->AFR[0] |=  (0b0010 << 4*ENC_LEFTA_Pin | 0b0010 << 4*ENC_LEFTB_Pin);
 80013b4:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <Encoders_Init+0x13c>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4a3a      	ldr	r2, [pc, #232]	; (80014a4 <Encoders_Init+0x13c>)
 80013ba:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80013be:	6213      	str	r3, [r2, #32]

	// Set AF1 for PA8 and PA9
	// AFRH is a separate register, values are linked to pins
	// 8-15
	ENC_Port->AFR[1] &= ~(0b1111 << 4*(ENC_RIGHTA_Pin - 8) | 0b1111 << 4*(ENC_RIGHTB_Pin - 8));
 80013c0:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <Encoders_Init+0x13c>)
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	4a37      	ldr	r2, [pc, #220]	; (80014a4 <Encoders_Init+0x13c>)
 80013c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013ca:	6253      	str	r3, [r2, #36]	; 0x24
	ENC_Port->AFR[1] |=  (0b0001 << 4*(ENC_RIGHTA_Pin - 8) | 0b0001 << 4*(ENC_RIGHTB_Pin - 8));
 80013cc:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <Encoders_Init+0x13c>)
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	4a34      	ldr	r2, [pc, #208]	; (80014a4 <Encoders_Init+0x13c>)
 80013d2:	f043 0311 	orr.w	r3, r3, #17
 80013d6:	6253      	str	r3, [r2, #36]	; 0x24

	// Clock setup for TIM1
	ENC_RIGHT_Tim->PSC = 0;
 80013d8:	4b33      	ldr	r3, [pc, #204]	; (80014a8 <Encoders_Init+0x140>)
 80013da:	2200      	movs	r2, #0
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
	ENC_RIGHT_Tim->ARR = 0xFFFF - 1;
 80013de:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <Encoders_Init+0x140>)
 80013e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c

	// Clock setup for TIM3
	ENC_LEFT_Tim->PSC = 0;
 80013e6:	4b31      	ldr	r3, [pc, #196]	; (80014ac <Encoders_Init+0x144>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
	ENC_LEFT_Tim->ARR = 0xFFFF - 1;
 80013ec:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <Encoders_Init+0x144>)
 80013ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable encoder quadrature mode for TIM1 and TIM3
	ENC_RIGHT_Tim->SMCR &= ~(0b111 << 3*0);
 80013f4:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <Encoders_Init+0x140>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	4a2b      	ldr	r2, [pc, #172]	; (80014a8 <Encoders_Init+0x140>)
 80013fa:	f023 0307 	bic.w	r3, r3, #7
 80013fe:	6093      	str	r3, [r2, #8]
	ENC_RIGHT_Tim->SMCR |=  (0b011 << 3*0);
 8001400:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <Encoders_Init+0x140>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <Encoders_Init+0x140>)
 8001406:	f043 0303 	orr.w	r3, r3, #3
 800140a:	6093      	str	r3, [r2, #8]

	ENC_LEFT_Tim->SMCR &= ~(0b111 << 3*0);
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <Encoders_Init+0x144>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4a26      	ldr	r2, [pc, #152]	; (80014ac <Encoders_Init+0x144>)
 8001412:	f023 0307 	bic.w	r3, r3, #7
 8001416:	6093      	str	r3, [r2, #8]
	ENC_LEFT_Tim->SMCR |=  (0b011 << 3*0);
 8001418:	4b24      	ldr	r3, [pc, #144]	; (80014ac <Encoders_Init+0x144>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	4a23      	ldr	r2, [pc, #140]	; (80014ac <Encoders_Init+0x144>)
 800141e:	f043 0303 	orr.w	r3, r3, #3
 8001422:	6093      	str	r3, [r2, #8]

	// Set counting direction for TIM1 and TIM3
	ENC_RIGHT_Tim->CCMR1 &= ~(0b11 << 0 | 0b11 << 8);
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <Encoders_Init+0x140>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <Encoders_Init+0x140>)
 800142a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800142e:	f023 0303 	bic.w	r3, r3, #3
 8001432:	6193      	str	r3, [r2, #24]
	ENC_RIGHT_Tim->CCMR1 |=  (0b01 << 0 | 0b01 << 8);
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <Encoders_Init+0x140>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <Encoders_Init+0x140>)
 800143a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6193      	str	r3, [r2, #24]

	ENC_LEFT_Tim->CCMR1 &= ~(0b11 << 0 | 0b11 << 8);
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <Encoders_Init+0x144>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a18      	ldr	r2, [pc, #96]	; (80014ac <Encoders_Init+0x144>)
 800144a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800144e:	f023 0303 	bic.w	r3, r3, #3
 8001452:	6193      	str	r3, [r2, #24]
	ENC_LEFT_Tim->CCMR1 |=  (0b01 << 0 | 0b01 << 8);
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <Encoders_Init+0x144>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a14      	ldr	r2, [pc, #80]	; (80014ac <Encoders_Init+0x144>)
 800145a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6193      	str	r3, [r2, #24]

	// Enable counter for TIM1 and TIM3
	ENC_RIGHT_Tim->CR1 |= (1 << 0);
 8001464:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <Encoders_Init+0x140>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <Encoders_Init+0x140>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6013      	str	r3, [r2, #0]
	ENC_LEFT_Tim->CR1 |= (1 << 0);
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <Encoders_Init+0x144>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <Encoders_Init+0x144>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6013      	str	r3, [r2, #0]

	// Enable immediate update of register on counter
	ENC_RIGHT_Tim->EGR |= (1 << 0);
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <Encoders_Init+0x140>)
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <Encoders_Init+0x140>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6153      	str	r3, [r2, #20]
	ENC_LEFT_Tim->EGR |= (1 << 0);
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <Encoders_Init+0x144>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <Encoders_Init+0x144>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6153      	str	r3, [r2, #20]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40010000 	.word	0x40010000
 80014ac:	40000400 	.word	0x40000400

080014b0 <Read_Encoders>:

void Read_Encoders(){
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	curr_left_enc  = ENC_LEFT_Tim->CNT;
 80014b4:	4b88      	ldr	r3, [pc, #544]	; (80016d8 <Read_Encoders+0x228>)
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b88      	ldr	r3, [pc, #544]	; (80016dc <Read_Encoders+0x22c>)
 80014bc:	601a      	str	r2, [r3, #0]
	curr_right_enc = ENC_RIGHT_Tim->CNT;
 80014be:	4b88      	ldr	r3, [pc, #544]	; (80016e0 <Read_Encoders+0x230>)
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b87      	ldr	r3, [pc, #540]	; (80016e4 <Read_Encoders+0x234>)
 80014c6:	601a      	str	r2, [r3, #0]

	delta_left  = (curr_left_enc  - last_left_enc)  * INC_MM;
 80014c8:	4b84      	ldr	r3, [pc, #528]	; (80016dc <Read_Encoders+0x22c>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b86      	ldr	r3, [pc, #536]	; (80016e8 <Read_Encoders+0x238>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f8fc 	bl	80006d0 <__aeabi_i2d>
 80014d8:	a37d      	add	r3, pc, #500	; (adr r3, 80016d0 <Read_Encoders+0x220>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7fe fe7b 	bl	80001d8 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff f9e3 	bl	80008b4 <__aeabi_d2iz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	4b7e      	ldr	r3, [pc, #504]	; (80016ec <Read_Encoders+0x23c>)
 80014f4:	801a      	strh	r2, [r3, #0]
	delta_right = (curr_right_enc - last_right_enc) * INC_MM;
 80014f6:	4b7b      	ldr	r3, [pc, #492]	; (80016e4 <Read_Encoders+0x234>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b7d      	ldr	r3, [pc, #500]	; (80016f0 <Read_Encoders+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f8e5 	bl	80006d0 <__aeabi_i2d>
 8001506:	a372      	add	r3, pc, #456	; (adr r3, 80016d0 <Read_Encoders+0x220>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7fe fe64 	bl	80001d8 <__aeabi_dmul>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff f9cc 	bl	80008b4 <__aeabi_d2iz>
 800151c:	4603      	mov	r3, r0
 800151e:	b21a      	sxth	r2, r3
 8001520:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <Read_Encoders+0x244>)
 8001522:	801a      	strh	r2, [r3, #0]

	delta_distance = (delta_left + delta_right) / 2;
 8001524:	4b71      	ldr	r3, [pc, #452]	; (80016ec <Read_Encoders+0x23c>)
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	461a      	mov	r2, r3
 800152c:	4b71      	ldr	r3, [pc, #452]	; (80016f4 <Read_Encoders+0x244>)
 800152e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001532:	4413      	add	r3, r2
 8001534:	0fda      	lsrs	r2, r3, #31
 8001536:	4413      	add	r3, r2
 8001538:	105b      	asrs	r3, r3, #1
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001542:	4b6d      	ldr	r3, [pc, #436]	; (80016f8 <Read_Encoders+0x248>)
 8001544:	edc3 7a00 	vstr	s15, [r3]
	delta_theta    = (delta_left - delta_right) / WHEEL_DISTANCE;
 8001548:	4b68      	ldr	r3, [pc, #416]	; (80016ec <Read_Encoders+0x23c>)
 800154a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154e:	461a      	mov	r2, r3
 8001550:	4b68      	ldr	r3, [pc, #416]	; (80016f4 <Read_Encoders+0x244>)
 8001552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	4a68      	ldr	r2, [pc, #416]	; (80016fc <Read_Encoders+0x24c>)
 800155a:	fb82 1203 	smull	r1, r2, r2, r3
 800155e:	1112      	asrs	r2, r2, #4
 8001560:	17db      	asrs	r3, r3, #31
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	ee07 3a90 	vmov	s15, r3
 8001568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800156c:	4b64      	ldr	r3, [pc, #400]	; (8001700 <Read_Encoders+0x250>)
 800156e:	edc3 7a00 	vstr	s15, [r3]

	x += delta_distance * cos(theta + delta_theta/2);
 8001572:	4b61      	ldr	r3, [pc, #388]	; (80016f8 <Read_Encoders+0x248>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f8bc 	bl	80006f4 <__aeabi_f2d>
 800157c:	4604      	mov	r4, r0
 800157e:	460d      	mov	r5, r1
 8001580:	4b5f      	ldr	r3, [pc, #380]	; (8001700 <Read_Encoders+0x250>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800158a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800158e:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <Read_Encoders+0x254>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001598:	ee17 0a90 	vmov	r0, s15
 800159c:	f7ff f8aa 	bl	80006f4 <__aeabi_f2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	ec43 2b10 	vmov	d0, r2, r3
 80015a8:	f001 fb16 	bl	8002bd8 <cos>
 80015ac:	ec53 2b10 	vmov	r2, r3, d0
 80015b0:	4620      	mov	r0, r4
 80015b2:	4629      	mov	r1, r5
 80015b4:	f7fe fe10 	bl	80001d8 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4614      	mov	r4, r2
 80015be:	461d      	mov	r5, r3
 80015c0:	4b51      	ldr	r3, [pc, #324]	; (8001708 <Read_Encoders+0x258>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff f895 	bl	80006f4 <__aeabi_f2d>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4620      	mov	r0, r4
 80015d0:	4629      	mov	r1, r5
 80015d2:	f7fe ff31 	bl	8000438 <__adddf3>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff f991 	bl	8000904 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a48      	ldr	r2, [pc, #288]	; (8001708 <Read_Encoders+0x258>)
 80015e6:	6013      	str	r3, [r2, #0]
	y += delta_distance * sin(theta + delta_theta/2);
 80015e8:	4b43      	ldr	r3, [pc, #268]	; (80016f8 <Read_Encoders+0x248>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff f881 	bl	80006f4 <__aeabi_f2d>
 80015f2:	4604      	mov	r4, r0
 80015f4:	460d      	mov	r5, r1
 80015f6:	4b42      	ldr	r3, [pc, #264]	; (8001700 <Read_Encoders+0x250>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001600:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001604:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <Read_Encoders+0x254>)
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160e:	ee17 0a90 	vmov	r0, s15
 8001612:	f7ff f86f 	bl	80006f4 <__aeabi_f2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	ec43 2b10 	vmov	d0, r2, r3
 800161e:	f001 fb2f 	bl	8002c80 <sin>
 8001622:	ec53 2b10 	vmov	r2, r3, d0
 8001626:	4620      	mov	r0, r4
 8001628:	4629      	mov	r1, r5
 800162a:	f7fe fdd5 	bl	80001d8 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4614      	mov	r4, r2
 8001634:	461d      	mov	r5, r3
 8001636:	4b35      	ldr	r3, [pc, #212]	; (800170c <Read_Encoders+0x25c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff f85a 	bl	80006f4 <__aeabi_f2d>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4620      	mov	r0, r4
 8001646:	4629      	mov	r1, r5
 8001648:	f7fe fef6 	bl	8000438 <__adddf3>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff f956 	bl	8000904 <__aeabi_d2f>
 8001658:	4603      	mov	r3, r0
 800165a:	4a2c      	ldr	r2, [pc, #176]	; (800170c <Read_Encoders+0x25c>)
 800165c:	6013      	str	r3, [r2, #0]
	theta += delta_theta;
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <Read_Encoders+0x254>)
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <Read_Encoders+0x250>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <Read_Encoders+0x254>)
 8001670:	edc3 7a00 	vstr	s15, [r3]

	left_speed  = delta_left  / ODOM_TIME; // meters per second
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <Read_Encoders+0x23c>)
 8001676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167a:	4a25      	ldr	r2, [pc, #148]	; (8001710 <Read_Encoders+0x260>)
 800167c:	fb82 1203 	smull	r1, r2, r2, r3
 8001680:	10d2      	asrs	r2, r2, #3
 8001682:	17db      	asrs	r3, r3, #31
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	b21b      	sxth	r3, r3
 8001688:	ee07 3a90 	vmov	s15, r3
 800168c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <Read_Encoders+0x264>)
 8001692:	edc3 7a00 	vstr	s15, [r3]
	right_speed = delta_right / ODOM_TIME; // meters per second
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <Read_Encoders+0x244>)
 8001698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <Read_Encoders+0x260>)
 800169e:	fb82 1203 	smull	r1, r2, r2, r3
 80016a2:	10d2      	asrs	r2, r2, #3
 80016a4:	17db      	asrs	r3, r3, #31
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <Read_Encoders+0x268>)
 80016b4:	edc3 7a00 	vstr	s15, [r3]

	last_left_enc  = curr_left_enc;
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <Read_Encoders+0x22c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <Read_Encoders+0x238>)
 80016be:	6013      	str	r3, [r2, #0]
	last_right_enc = curr_right_enc;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <Read_Encoders+0x234>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <Read_Encoders+0x240>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	bdb0      	pop	{r4, r5, r7, pc}
 80016cc:	f3af 8000 	nop.w
 80016d0:	01487f76 	.word	0x01487f76
 80016d4:	3fb7ef9a 	.word	0x3fb7ef9a
 80016d8:	40000400 	.word	0x40000400
 80016dc:	2000005c 	.word	0x2000005c
 80016e0:	40010000 	.word	0x40010000
 80016e4:	20000060 	.word	0x20000060
 80016e8:	20000054 	.word	0x20000054
 80016ec:	20000064 	.word	0x20000064
 80016f0:	20000058 	.word	0x20000058
 80016f4:	20000066 	.word	0x20000066
 80016f8:	20000068 	.word	0x20000068
 80016fc:	1b4e81b5 	.word	0x1b4e81b5
 8001700:	2000006c 	.word	0x2000006c
 8001704:	20000000 	.word	0x20000000
 8001708:	20000070 	.word	0x20000070
 800170c:	20000074 	.word	0x20000074
 8001710:	66666667 	.word	0x66666667
 8001714:	20000078 	.word	0x20000078
 8001718:	2000007c 	.word	0x2000007c

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <HAL_MspInit+0x4c>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <HAL_MspInit+0x4c>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_MspInit+0x4c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_MspInit+0x4c>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_MspInit+0x4c>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_MspInit+0x4c>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800175a:	2007      	movs	r0, #7
 800175c:	f000 fbf4 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800

0800176c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001770:	e7fe      	b.n	8001770 <NMI_Handler+0x4>

08001772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <MemManage_Handler+0x4>

0800177e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <UsageFault_Handler+0x4>

0800178a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b8:	f000 faf4 	bl	8001da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_SetPriorityGrouping>:
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800180c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4907      	ldr	r1, [pc, #28]	; (8001864 <__NVIC_EnableIRQ+0x38>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	; (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <buffer_write>:
	volatile uint8_t head;
	volatile uint8_t tail;
}circular_buff;

static inline void buffer_write(circular_buff* buf, uint8_t x)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	70fb      	strb	r3, [r7, #3]
	buf->buffer[buf->tail]=x;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	7a52      	ldrb	r2, [r2, #9]
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	4413      	add	r3, r2
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	701a      	strb	r2, [r3, #0]

	if ((buf->tail + 1) >= buf->len)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7a5b      	ldrb	r3, [r3, #9]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3301      	adds	r3, #1
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	4293      	cmp	r3, r2
 800194c:	db03      	blt.n	8001956 <buffer_write+0x34>
		buf->tail = 0;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	725a      	strb	r2, [r3, #9]
	else
		buf->tail++;
}
 8001954:	e006      	b.n	8001964 <buffer_write+0x42>
		buf->tail++;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	7a5b      	ldrb	r3, [r3, #9]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	3301      	adds	r3, #1
 800195e:	b2da      	uxtb	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	725a      	strb	r2, [r3, #9]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <buffer_read>:

static inline uint8_t buffer_read(circular_buff* buf)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	if (buf->head == buf->tail)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7a1b      	ldrb	r3, [r3, #8]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7a5b      	ldrb	r3, [r3, #9]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	429a      	cmp	r2, r3
 8001986:	d101      	bne.n	800198c <buffer_read+0x1c>
		return '\0';
 8001988:	2300      	movs	r3, #0
 800198a:	e01b      	b.n	80019c4 <buffer_read+0x54>

	uint8_t read = buf->buffer[buf->head];
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	7a12      	ldrb	r2, [r2, #8]
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	73fb      	strb	r3, [r7, #15]

	if ((buf->head + 1) >= buf->len)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7a1b      	ldrb	r3, [r3, #8]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	3301      	adds	r3, #1
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	7812      	ldrb	r2, [r2, #0]
 80019a8:	4293      	cmp	r3, r2
 80019aa:	db03      	blt.n	80019b4 <buffer_read+0x44>
		buf->head = 0;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	721a      	strb	r2, [r3, #8]
 80019b2:	e006      	b.n	80019c2 <buffer_read+0x52>
	else
		buf->head++;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7a1b      	ldrb	r3, [r3, #8]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	3301      	adds	r3, #1
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	721a      	strb	r2, [r3, #8]

	return read;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <USART2_Init>:
	uint8_t u[4];
}convert_float;

// Initializes USART2 over pins PA2 and PA3 with interrupt handler
void USART2_Init()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
	uint32_t uartdiv = SystemCoreClock/2 / BAUDRATE;
 80019d6:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <USART2_Init+0xa8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a28      	ldr	r2, [pc, #160]	; (8001a7c <USART2_Init+0xac>)
 80019dc:	fba2 2303 	umull	r2, r3, r2, r3
 80019e0:	0c5b      	lsrs	r3, r3, #17
 80019e2:	607b      	str	r3, [r7, #4]
    uint32_t uart_pri_encoding = NVIC_EncodePriority( 0, 1, 0 );
 80019e4:	2200      	movs	r2, #0
 80019e6:	2101      	movs	r1, #1
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff ff67 	bl	80018bc <NVIC_EncodePriority>
 80019ee:	6038      	str	r0, [r7, #0]

	// Enable clock for port A
	RCC->AHB1ENR |= ( RCC_AHB1ENR_GPIOAEN );
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <USART2_Init+0xb0>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <USART2_Init+0xb0>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6313      	str	r3, [r2, #48]	; 0x30

	// Clock source for USART2
	RCC->APB1ENR |= ( RCC_APB1ENR_USART2EN );
 80019fc:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <USART2_Init+0xb0>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <USART2_Init+0xb0>)
 8001a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a06:	6413      	str	r3, [r2, #64]	; 0x40

	// PA2-3 AF7
	UART_Port->MODER &= ~(0b11 << 2*TX_Pin | 0b11 << 2*RX_PIN);
 8001a08:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <USART2_Init+0xb4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <USART2_Init+0xb4>)
 8001a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a12:	6013      	str	r3, [r2, #0]
	UART_Port->MODER |=  (0b10 << 2*TX_Pin | 0b10 << 2*RX_PIN);
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <USART2_Init+0xb4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1a      	ldr	r2, [pc, #104]	; (8001a84 <USART2_Init+0xb4>)
 8001a1a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001a1e:	6013      	str	r3, [r2, #0]

	UART_Port->AFR[0] &= ~(0b1111 << 4*TX_Pin | 0b1111 << 4*RX_PIN);
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <USART2_Init+0xb4>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <USART2_Init+0xb4>)
 8001a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a2a:	6213      	str	r3, [r2, #32]
	UART_Port->AFR[0] |=  (0b0111 << 4*TX_Pin | 0b0111 << 4*RX_PIN);
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <USART2_Init+0xb4>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <USART2_Init+0xb4>)
 8001a32:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001a36:	6213      	str	r3, [r2, #32]

    // Setup the NVIC to enable interrupts.
    NVIC_SetPriorityGrouping( 0 );
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f7ff fed3 	bl	80017e4 <__NVIC_SetPriorityGrouping>
    // UART receive interrupts should be high priority.
    NVIC_SetPriority( USART2_IRQn, uart_pri_encoding );
 8001a3e:	6839      	ldr	r1, [r7, #0]
 8001a40:	2026      	movs	r0, #38	; 0x26
 8001a42:	f7ff ff11 	bl	8001868 <__NVIC_SetPriority>
    NVIC_EnableIRQ( USART2_IRQn );
 8001a46:	2026      	movs	r0, #38	; 0x26
 8001a48:	f7ff fef0 	bl	800182c <__NVIC_EnableIRQ>

    // Set BaudRate to 115200
    USART2->BRR = ((uartdiv/16) << USART_BRR_DIV_Mantissa_Pos |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	011a      	lsls	r2, r3, #4
    			   (uartdiv%16) << USART_BRR_DIV_Fraction_Pos);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f003 030f 	and.w	r3, r3, #15
    USART2->BRR = ((uartdiv/16) << USART_BRR_DIV_Mantissa_Pos |
 8001a58:	490b      	ldr	r1, [pc, #44]	; (8001a88 <USART2_Init+0xb8>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]

    USART2->CR1 |= (USART_CR1_RE | USART_CR1_TE | USART_CR1_UE | USART_CR1_RXNEIE);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <USART2_Init+0xb8>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <USART2_Init+0xb8>)
 8001a64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a68:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001a6c:	60d3      	str	r3, [r2, #12]
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000004 	.word	0x20000004
 8001a7c:	91a2b3c5 	.word	0x91a2b3c5
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40004400 	.word	0x40004400

08001a8c <USART2_IRQHandler>:

// Interrupt handler for receiving data over UART
void USART2_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	if (USART2->SR & USART_SR_RXNE) {
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <USART2_IRQHandler+0x2c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00a      	beq.n	8001ab2 <USART2_IRQHandler+0x26>
	  c = USART2->DR;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <USART2_IRQHandler+0x2c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <USART2_IRQHandler+0x30>)
 8001aa4:	701a      	strb	r2, [r3, #0]
	  buffer_write(&in_buf, c);
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <USART2_IRQHandler+0x30>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <USART2_IRQHandler+0x34>)
 8001aae:	f7ff ff38 	bl	8001922 <buffer_write>
	}
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40004400 	.word	0x40004400
 8001abc:	2000018b 	.word	0x2000018b
 8001ac0:	20000008 	.word	0x20000008

08001ac4 <UART_Interrupt_Init>:

// Configures timer TIM10 with interrupt every 1ms which check input buffer
void UART_Interrupt_Init()
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
	// Lower priority than UART IRQHandler, higher priority than PID
	uint32_t tim11_pri_encoding = NVIC_EncodePriority(0, 1, 1);
 8001aca:	2201      	movs	r2, #1
 8001acc:	2101      	movs	r1, #1
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff fef4 	bl	80018bc <NVIC_EncodePriority>
 8001ad4:	6078      	str	r0, [r7, #4]

	// Clock source for TIM11
	RCC->APB2ENR |= ( RCC_APB2ENR_TIM11EN );
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <UART_Interrupt_Init+0x6c>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <UART_Interrupt_Init+0x6c>)
 8001adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae0:	6453      	str	r3, [r2, #68]	; 0x44

	// Clock setup for TIM11, 1ms
	UART_Tim->PSC = 1;
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <UART_Interrupt_Init+0x70>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
	UART_Tim->ARR = 42000 - 1;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <UART_Interrupt_Init+0x70>)
 8001aea:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable immediate update of register on counter
	UART_Tim->EGR |= ( TIM_EGR_UG );
 8001af0:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <UART_Interrupt_Init+0x70>)
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <UART_Interrupt_Init+0x70>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6153      	str	r3, [r2, #20]

	// Enable interrupts for TIM11
	UART_Tim->DIER |= ( TIM_DIER_UIE );
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <UART_Interrupt_Init+0x70>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <UART_Interrupt_Init+0x70>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	60d3      	str	r3, [r2, #12]

	// Enable counter for TIM11
	UART_Tim->CR1 |= ( TIM_CR1_CEN );
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <UART_Interrupt_Init+0x70>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <UART_Interrupt_Init+0x70>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6013      	str	r3, [r2, #0]

	// Enable interrupt
	NVIC_SetPriorityGrouping( 0 );
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff fe65 	bl	80017e4 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority( TIM1_TRG_COM_TIM11_IRQn, tim11_pri_encoding );
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	201a      	movs	r0, #26
 8001b1e:	f7ff fea3 	bl	8001868 <__NVIC_SetPriority>
	NVIC_EnableIRQ( TIM1_TRG_COM_TIM11_IRQn );
 8001b22:	201a      	movs	r0, #26
 8001b24:	f7ff fe82 	bl	800182c <__NVIC_EnableIRQ>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40014800 	.word	0x40014800

08001b38 <TIM1_TRG_COM_TIM11_IRQHandler>:

// Checks input buffer for messages from connected device
void TIM1_TRG_COM_TIM11_IRQHandler(void){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0

	uart_interrupt_counter++;
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <TIM1_TRG_COM_TIM11_IRQHandler+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	3301      	adds	r3, #1
 8001b42:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <TIM1_TRG_COM_TIM11_IRQHandler+0x40>)
 8001b44:	6013      	str	r3, [r2, #0]

	if (uart_interrupt_counter % UART_TIME == 0){
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <TIM1_TRG_COM_TIM11_IRQHandler+0x40>)
 8001b48:	6819      	ldr	r1, [r3, #0]
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <TIM1_TRG_COM_TIM11_IRQHandler+0x44>)
 8001b4c:	fba3 2301 	umull	r2, r3, r3, r1
 8001b50:	08da      	lsrs	r2, r3, #3
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	1aca      	subs	r2, r1, r3
 8001b5c:	2a00      	cmp	r2, #0
 8001b5e:	d102      	bne.n	8001b66 <TIM1_TRG_COM_TIM11_IRQHandler+0x2e>
		Send_Byte('1');
 8001b60:	2031      	movs	r0, #49	; 0x31
 8001b62:	f000 f80f 	bl	8001b84 <Send_Byte>
		// TODO read buffer and discard message if it isn't valid
		// TODO send acknowledge to the connected device
	}

	// Clears interrupt flag so that other interrupts can work
	UART_Tim->SR &= ~TIM_SR_UIF;
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <TIM1_TRG_COM_TIM11_IRQHandler+0x48>)
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <TIM1_TRG_COM_TIM11_IRQHandler+0x48>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	6113      	str	r3, [r2, #16]
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000080 	.word	0x20000080
 8001b7c:	cccccccd 	.word	0xcccccccd
 8001b80:	40014800 	.word	0x40014800

08001b84 <Send_Byte>:

// Sends a character over UART to the connected device
void Send_Byte(uint8_t data)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & USART_SR_TXE)){};
 8001b8e:	bf00      	nop
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <Send_Byte+0x2c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f9      	beq.n	8001b90 <Send_Byte+0xc>
	USART2->DR = data;
 8001b9c:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <Send_Byte+0x2c>)
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	6053      	str	r3, [r2, #4]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40004400 	.word	0x40004400

08001bb4 <Send_Buffer>:

// Sends contents of output buffer to the connected device
void Send_Buffer()
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	send_data = buffer_read(&out_buf);
 8001bb8:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <Send_Buffer+0x3c>)
 8001bba:	f7ff fed9 	bl	8001970 <buffer_read>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <Send_Buffer+0x40>)
 8001bc4:	701a      	strb	r2, [r3, #0]

	while(send_data != '\0'){
 8001bc6:	e00b      	b.n	8001be0 <Send_Buffer+0x2c>
		Send_Byte(send_data);
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <Send_Buffer+0x40>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ffd9 	bl	8001b84 <Send_Byte>
		send_data = buffer_read(&out_buf);
 8001bd2:	4807      	ldr	r0, [pc, #28]	; (8001bf0 <Send_Buffer+0x3c>)
 8001bd4:	f7ff fecc 	bl	8001970 <buffer_read>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <Send_Buffer+0x40>)
 8001bde:	701a      	strb	r2, [r3, #0]
	while(send_data != '\0'){
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <Send_Buffer+0x40>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1ef      	bne.n	8001bc8 <Send_Buffer+0x14>
	}
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000014 	.word	0x20000014
 8001bf4:	2000018a 	.word	0x2000018a

08001bf8 <Send_Command>:
	return &null;
}

// Constructs a message and sends it through the output buffer to the connected device
void Send_Command(uint8_t code, float value[], uint8_t len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
 8001c04:	4613      	mov	r3, r2
 8001c06:	71bb      	strb	r3, [r7, #6]
	buffer_write(&out_buf, START);
 8001c08:	21fa      	movs	r1, #250	; 0xfa
 8001c0a:	4825      	ldr	r0, [pc, #148]	; (8001ca0 <Send_Command+0xa8>)
 8001c0c:	f7ff fe89 	bl	8001922 <buffer_write>
	buffer_write(&out_buf, code);
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	4619      	mov	r1, r3
 8001c14:	4822      	ldr	r0, [pc, #136]	; (8001ca0 <Send_Command+0xa8>)
 8001c16:	f7ff fe84 	bl	8001922 <buffer_write>
	buffer_write(&out_buf, len + 3);
 8001c1a:	79bb      	ldrb	r3, [r7, #6]
 8001c1c:	3303      	adds	r3, #3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	481f      	ldr	r0, [pc, #124]	; (8001ca0 <Send_Command+0xa8>)
 8001c24:	f7ff fe7d 	bl	8001922 <buffer_write>

	size = sizeof(value[0]);
 8001c28:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <Send_Command+0xac>)
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<len/size; i++){
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
 8001c32:	e021      	b.n	8001c78 <Send_Command+0x80>
		convert_float.f = value[i];
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1a      	ldr	r2, [pc, #104]	; (8001ca8 <Send_Command+0xb0>)
 8001c40:	6013      	str	r3, [r2, #0]

		buffer_write(&out_buf, convert_float.u[0]);
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <Send_Command+0xb0>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	4619      	mov	r1, r3
 8001c48:	4815      	ldr	r0, [pc, #84]	; (8001ca0 <Send_Command+0xa8>)
 8001c4a:	f7ff fe6a 	bl	8001922 <buffer_write>
		buffer_write(&out_buf, convert_float.u[1]);
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <Send_Command+0xb0>)
 8001c50:	785b      	ldrb	r3, [r3, #1]
 8001c52:	4619      	mov	r1, r3
 8001c54:	4812      	ldr	r0, [pc, #72]	; (8001ca0 <Send_Command+0xa8>)
 8001c56:	f7ff fe64 	bl	8001922 <buffer_write>
		buffer_write(&out_buf, convert_float.u[2]);
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <Send_Command+0xb0>)
 8001c5c:	789b      	ldrb	r3, [r3, #2]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480f      	ldr	r0, [pc, #60]	; (8001ca0 <Send_Command+0xa8>)
 8001c62:	f7ff fe5e 	bl	8001922 <buffer_write>
		buffer_write(&out_buf, convert_float.u[3]);
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <Send_Command+0xb0>)
 8001c68:	78db      	ldrb	r3, [r3, #3]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480c      	ldr	r0, [pc, #48]	; (8001ca0 <Send_Command+0xa8>)
 8001c6e:	f7ff fe58 	bl	8001922 <buffer_write>
	for(uint8_t i=0; i<len/size; i++){
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	3301      	adds	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <Send_Command+0xac>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	79ba      	ldrb	r2, [r7, #6]
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d3d4      	bcc.n	8001c34 <Send_Command+0x3c>
	}

	buffer_write(&out_buf, STOP);
 8001c8a:	21fb      	movs	r1, #251	; 0xfb
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <Send_Command+0xa8>)
 8001c8e:	f7ff fe48 	bl	8001922 <buffer_write>

	Send_Buffer();
 8001c92:	f7ff ff8f 	bl	8001bb4 <Send_Buffer>
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000014 	.word	0x20000014
 8001ca4:	20000189 	.word	0x20000189
 8001ca8:	2000018c 	.word	0x2000018c

08001cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cb0:	f7ff fd86 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cb6:	490d      	ldr	r1, [pc, #52]	; (8001cec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ccc:	4c0a      	ldr	r4, [pc, #40]	; (8001cf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cda:	f000 ff59 	bl	8002b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cde:	f7fe ffdf 	bl	8000ca0 <main>
  bx  lr    
 8001ce2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001cf0:	08003f10 	.word	0x08003f10
  ldr r2, =_sbss
 8001cf4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001cf8:	20000194 	.word	0x20000194

08001cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC_IRQHandler>
	...

08001d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <HAL_Init+0x40>)
 8001d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <HAL_Init+0x40>)
 8001d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <HAL_Init+0x40>)
 8001d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f000 f90d 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f000 f808 	bl	8001d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d34:	f7ff fcf2 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023c00 	.word	0x40023c00

08001d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_InitTick+0x54>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_InitTick+0x58>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f917 	bl	8001f96 <HAL_SYSTICK_Config>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00e      	b.n	8001d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b0f      	cmp	r3, #15
 8001d76:	d80a      	bhi.n	8001d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d80:	f000 f8ed 	bl	8001f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d84:	4a06      	ldr	r2, [pc, #24]	; (8001da0 <HAL_InitTick+0x5c>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e000      	b.n	8001d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	20000024 	.word	0x20000024
 8001da0:	20000020 	.word	0x20000020

08001da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_IncTick+0x20>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_IncTick+0x24>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_IncTick+0x24>)
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000024 	.word	0x20000024
 8001dc8:	20000190 	.word	0x20000190

08001dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <HAL_GetTick+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000190 	.word	0x20000190

08001de4 <__NVIC_SetPriorityGrouping>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_SetPriority>:
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0a      	blt.n	8001e72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	490c      	ldr	r1, [pc, #48]	; (8001e94 <__NVIC_SetPriority+0x4c>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e70:	e00a      	b.n	8001e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4908      	ldr	r1, [pc, #32]	; (8001e98 <__NVIC_SetPriority+0x50>)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3b04      	subs	r3, #4
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	440b      	add	r3, r1
 8001e86:	761a      	strb	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <NVIC_EncodePriority>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f1c3 0307 	rsb	r3, r3, #7
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	bf28      	it	cs
 8001eba:	2304      	movcs	r3, #4
 8001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d902      	bls.n	8001ecc <NVIC_EncodePriority+0x30>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3b03      	subs	r3, #3
 8001eca:	e000      	b.n	8001ece <NVIC_EncodePriority+0x32>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43d9      	mvns	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	4313      	orrs	r3, r2
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f14:	d301      	bcc.n	8001f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00f      	b.n	8001f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <SysTick_Config+0x40>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f22:	210f      	movs	r1, #15
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f28:	f7ff ff8e 	bl	8001e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <SysTick_Config+0x40>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <SysTick_Config+0x40>)
 8001f34:	2207      	movs	r2, #7
 8001f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff47 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f70:	f7ff ff5c 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7ff ff8e 	bl	8001e9c <NVIC_EncodePriority>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff5d 	bl	8001e48 <__NVIC_SetPriority>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffb0 	bl	8001f04 <SysTick_Config>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	e159      	b.n	8002280 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	f040 8148 	bne.w	800227a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d005      	beq.n	8002002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d130      	bne.n	8002064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	2203      	movs	r2, #3
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002038:	2201      	movs	r2, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 0201 	and.w	r2, r3, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b03      	cmp	r3, #3
 800206e:	d017      	beq.n	80020a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d123      	bne.n	80020f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	08da      	lsrs	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3208      	adds	r2, #8
 80020b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	220f      	movs	r2, #15
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	08da      	lsrs	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3208      	adds	r2, #8
 80020ee:	69b9      	ldr	r1, [r7, #24]
 80020f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0203 	and.w	r2, r3, #3
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80a2 	beq.w	800227a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b57      	ldr	r3, [pc, #348]	; (8002298 <HAL_GPIO_Init+0x2e8>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a56      	ldr	r2, [pc, #344]	; (8002298 <HAL_GPIO_Init+0x2e8>)
 8002140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b54      	ldr	r3, [pc, #336]	; (8002298 <HAL_GPIO_Init+0x2e8>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002152:	4a52      	ldr	r2, [pc, #328]	; (800229c <HAL_GPIO_Init+0x2ec>)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	220f      	movs	r2, #15
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a49      	ldr	r2, [pc, #292]	; (80022a0 <HAL_GPIO_Init+0x2f0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d019      	beq.n	80021b2 <HAL_GPIO_Init+0x202>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a48      	ldr	r2, [pc, #288]	; (80022a4 <HAL_GPIO_Init+0x2f4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_GPIO_Init+0x1fe>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a47      	ldr	r2, [pc, #284]	; (80022a8 <HAL_GPIO_Init+0x2f8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00d      	beq.n	80021aa <HAL_GPIO_Init+0x1fa>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a46      	ldr	r2, [pc, #280]	; (80022ac <HAL_GPIO_Init+0x2fc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <HAL_GPIO_Init+0x1f6>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a45      	ldr	r2, [pc, #276]	; (80022b0 <HAL_GPIO_Init+0x300>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_GPIO_Init+0x1f2>
 800219e:	2304      	movs	r3, #4
 80021a0:	e008      	b.n	80021b4 <HAL_GPIO_Init+0x204>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x204>
 80021a6:	2303      	movs	r3, #3
 80021a8:	e004      	b.n	80021b4 <HAL_GPIO_Init+0x204>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e002      	b.n	80021b4 <HAL_GPIO_Init+0x204>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_GPIO_Init+0x204>
 80021b2:	2300      	movs	r3, #0
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	f002 0203 	and.w	r2, r2, #3
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	4093      	lsls	r3, r2
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c4:	4935      	ldr	r1, [pc, #212]	; (800229c <HAL_GPIO_Init+0x2ec>)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d2:	4b38      	ldr	r3, [pc, #224]	; (80022b4 <HAL_GPIO_Init+0x304>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021f6:	4a2f      	ldr	r2, [pc, #188]	; (80022b4 <HAL_GPIO_Init+0x304>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021fc:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <HAL_GPIO_Init+0x304>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002220:	4a24      	ldr	r2, [pc, #144]	; (80022b4 <HAL_GPIO_Init+0x304>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002226:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <HAL_GPIO_Init+0x304>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800224a:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_GPIO_Init+0x304>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_GPIO_Init+0x304>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002274:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <HAL_GPIO_Init+0x304>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3301      	adds	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	f67f aea2 	bls.w	8001fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40013800 	.word	0x40013800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40020400 	.word	0x40020400
 80022a8:	40020800 	.word	0x40020800
 80022ac:	40020c00 	.word	0x40020c00
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40013c00 	.word	0x40013c00

080022b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e267      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d075      	beq.n	80023c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022d6:	4b88      	ldr	r3, [pc, #544]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d00c      	beq.n	80022fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e2:	4b85      	ldr	r3, [pc, #532]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d112      	bne.n	8002314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ee:	4b82      	ldr	r3, [pc, #520]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fa:	d10b      	bne.n	8002314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fc:	4b7e      	ldr	r3, [pc, #504]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d05b      	beq.n	80023c0 <HAL_RCC_OscConfig+0x108>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d157      	bne.n	80023c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e242      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231c:	d106      	bne.n	800232c <HAL_RCC_OscConfig+0x74>
 800231e:	4b76      	ldr	r3, [pc, #472]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a75      	ldr	r2, [pc, #468]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e01d      	b.n	8002368 <HAL_RCC_OscConfig+0xb0>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0x98>
 8002336:	4b70      	ldr	r3, [pc, #448]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6f      	ldr	r2, [pc, #444]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 800233c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b6d      	ldr	r3, [pc, #436]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6c      	ldr	r2, [pc, #432]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e00b      	b.n	8002368 <HAL_RCC_OscConfig+0xb0>
 8002350:	4b69      	ldr	r3, [pc, #420]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a68      	ldr	r2, [pc, #416]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b66      	ldr	r3, [pc, #408]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a65      	ldr	r2, [pc, #404]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d013      	beq.n	8002398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7ff fd2c 	bl	8001dcc <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002378:	f7ff fd28 	bl	8001dcc <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e207      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	4b5b      	ldr	r3, [pc, #364]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0xc0>
 8002396:	e014      	b.n	80023c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff fd18 	bl	8001dcc <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a0:	f7ff fd14 	bl	8001dcc <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e1f3      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b2:	4b51      	ldr	r3, [pc, #324]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0xe8>
 80023be:	e000      	b.n	80023c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d063      	beq.n	8002496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ce:	4b4a      	ldr	r3, [pc, #296]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00b      	beq.n	80023f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023da:	4b47      	ldr	r3, [pc, #284]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d11c      	bne.n	8002420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e6:	4b44      	ldr	r3, [pc, #272]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d116      	bne.n	8002420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_RCC_OscConfig+0x152>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d001      	beq.n	800240a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e1c7      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240a:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4937      	ldr	r1, [pc, #220]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	e03a      	b.n	8002496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d020      	beq.n	800246a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002428:	4b34      	ldr	r3, [pc, #208]	; (80024fc <HAL_RCC_OscConfig+0x244>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242e:	f7ff fccd 	bl	8001dcc <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002436:	f7ff fcc9 	bl	8001dcc <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e1a8      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002448:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002454:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4925      	ldr	r1, [pc, #148]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002464:	4313      	orrs	r3, r2
 8002466:	600b      	str	r3, [r1, #0]
 8002468:	e015      	b.n	8002496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800246a:	4b24      	ldr	r3, [pc, #144]	; (80024fc <HAL_RCC_OscConfig+0x244>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7ff fcac 	bl	8001dcc <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002478:	f7ff fca8 	bl	8001dcc <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e187      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248a:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d036      	beq.n	8002510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d016      	beq.n	80024d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <HAL_RCC_OscConfig+0x248>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7ff fc8c 	bl	8001dcc <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b8:	f7ff fc88 	bl	8001dcc <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e167      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_OscConfig+0x240>)
 80024cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x200>
 80024d6:	e01b      	b.n	8002510 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_RCC_OscConfig+0x248>)
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f7ff fc75 	bl	8001dcc <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	e00e      	b.n	8002504 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e6:	f7ff fc71 	bl	8001dcc <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d907      	bls.n	8002504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e150      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
 80024f8:	40023800 	.word	0x40023800
 80024fc:	42470000 	.word	0x42470000
 8002500:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	4b88      	ldr	r3, [pc, #544]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 8002506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ea      	bne.n	80024e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8097 	beq.w	800264c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002522:	4b81      	ldr	r3, [pc, #516]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	4b7d      	ldr	r3, [pc, #500]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4a7c      	ldr	r2, [pc, #496]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253c:	6413      	str	r3, [r2, #64]	; 0x40
 800253e:	4b7a      	ldr	r3, [pc, #488]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254a:	2301      	movs	r3, #1
 800254c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254e:	4b77      	ldr	r3, [pc, #476]	; (800272c <HAL_RCC_OscConfig+0x474>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d118      	bne.n	800258c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255a:	4b74      	ldr	r3, [pc, #464]	; (800272c <HAL_RCC_OscConfig+0x474>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a73      	ldr	r2, [pc, #460]	; (800272c <HAL_RCC_OscConfig+0x474>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002566:	f7ff fc31 	bl	8001dcc <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256e:	f7ff fc2d 	bl	8001dcc <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e10c      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCC_OscConfig+0x474>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x2ea>
 8002594:	4b64      	ldr	r3, [pc, #400]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	4a63      	ldr	r2, [pc, #396]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6713      	str	r3, [r2, #112]	; 0x70
 80025a0:	e01c      	b.n	80025dc <HAL_RCC_OscConfig+0x324>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x30c>
 80025aa:	4b5f      	ldr	r3, [pc, #380]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	4a5e      	ldr	r2, [pc, #376]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	6713      	str	r3, [r2, #112]	; 0x70
 80025b6:	4b5c      	ldr	r3, [pc, #368]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 80025b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ba:	4a5b      	ldr	r2, [pc, #364]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6713      	str	r3, [r2, #112]	; 0x70
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0x324>
 80025c4:	4b58      	ldr	r3, [pc, #352]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	4a57      	ldr	r2, [pc, #348]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	6713      	str	r3, [r2, #112]	; 0x70
 80025d0:	4b55      	ldr	r3, [pc, #340]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	4a54      	ldr	r2, [pc, #336]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 80025d6:	f023 0304 	bic.w	r3, r3, #4
 80025da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d015      	beq.n	8002610 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7ff fbf2 	bl	8001dcc <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ec:	f7ff fbee 	bl	8001dcc <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e0cb      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002602:	4b49      	ldr	r3, [pc, #292]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0ee      	beq.n	80025ec <HAL_RCC_OscConfig+0x334>
 800260e:	e014      	b.n	800263a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002610:	f7ff fbdc 	bl	8001dcc <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002616:	e00a      	b.n	800262e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002618:	f7ff fbd8 	bl	8001dcc <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e0b5      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262e:	4b3e      	ldr	r3, [pc, #248]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1ee      	bne.n	8002618 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d105      	bne.n	800264c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002640:	4b39      	ldr	r3, [pc, #228]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	4a38      	ldr	r2, [pc, #224]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 8002646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80a1 	beq.w	8002798 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002656:	4b34      	ldr	r3, [pc, #208]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b08      	cmp	r3, #8
 8002660:	d05c      	beq.n	800271c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d141      	bne.n	80026ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266a:	4b31      	ldr	r3, [pc, #196]	; (8002730 <HAL_RCC_OscConfig+0x478>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7ff fbac 	bl	8001dcc <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002678:	f7ff fba8 	bl	8001dcc <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e087      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	019b      	lsls	r3, r3, #6
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	085b      	lsrs	r3, r3, #1
 80026ae:	3b01      	subs	r3, #1
 80026b0:	041b      	lsls	r3, r3, #16
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	061b      	lsls	r3, r3, #24
 80026ba:	491b      	ldr	r1, [pc, #108]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x478>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7ff fb81 	bl	8001dcc <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ce:	f7ff fb7d 	bl	8001dcc <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e05c      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x416>
 80026ec:	e054      	b.n	8002798 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_RCC_OscConfig+0x478>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7ff fb6a 	bl	8001dcc <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7ff fb66 	bl	8001dcc <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e045      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_RCC_OscConfig+0x470>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x444>
 800271a:	e03d      	b.n	8002798 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e038      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
 8002728:	40023800 	.word	0x40023800
 800272c:	40007000 	.word	0x40007000
 8002730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002734:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_RCC_OscConfig+0x4ec>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d028      	beq.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d121      	bne.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d11a      	bne.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800276a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800276c:	4293      	cmp	r3, r2
 800276e:	d111      	bne.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	085b      	lsrs	r3, r3, #1
 800277c:	3b01      	subs	r3, #1
 800277e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d107      	bne.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800

080027a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0cc      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027bc:	4b68      	ldr	r3, [pc, #416]	; (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d90c      	bls.n	80027e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b65      	ldr	r3, [pc, #404]	; (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b63      	ldr	r3, [pc, #396]	; (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0b8      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027fc:	4b59      	ldr	r3, [pc, #356]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4a58      	ldr	r2, [pc, #352]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002814:	4b53      	ldr	r3, [pc, #332]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4a52      	ldr	r2, [pc, #328]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800281e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002820:	4b50      	ldr	r3, [pc, #320]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	494d      	ldr	r1, [pc, #308]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d044      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	4b47      	ldr	r3, [pc, #284]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d119      	bne.n	8002886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e07f      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d003      	beq.n	8002866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002862:	2b03      	cmp	r3, #3
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002866:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e06f      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002876:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e067      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002886:	4b37      	ldr	r3, [pc, #220]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f023 0203 	bic.w	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4934      	ldr	r1, [pc, #208]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	4313      	orrs	r3, r2
 8002896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002898:	f7ff fa98 	bl	8001dcc <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a0:	f7ff fa94 	bl	8001dcc <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e04f      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	4b2b      	ldr	r3, [pc, #172]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 020c 	and.w	r2, r3, #12
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d1eb      	bne.n	80028a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028c8:	4b25      	ldr	r3, [pc, #148]	; (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d20c      	bcs.n	80028f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b22      	ldr	r3, [pc, #136]	; (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e032      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4916      	ldr	r1, [pc, #88]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	490e      	ldr	r1, [pc, #56]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800292e:	f000 f821 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 8002932:	4602      	mov	r2, r0
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	490a      	ldr	r1, [pc, #40]	; (8002968 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	5ccb      	ldrb	r3, [r1, r3]
 8002942:	fa22 f303 	lsr.w	r3, r2, r3
 8002946:	4a09      	ldr	r2, [pc, #36]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff f9f8 	bl	8001d44 <HAL_InitTick>

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40023c00 	.word	0x40023c00
 8002964:	40023800 	.word	0x40023800
 8002968:	08003d18 	.word	0x08003d18
 800296c:	20000004 	.word	0x20000004
 8002970:	20000020 	.word	0x20000020

08002974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002978:	b094      	sub	sp, #80	; 0x50
 800297a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	647b      	str	r3, [r7, #68]	; 0x44
 8002980:	2300      	movs	r3, #0
 8002982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002984:	2300      	movs	r3, #0
 8002986:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800298c:	4b79      	ldr	r3, [pc, #484]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b08      	cmp	r3, #8
 8002996:	d00d      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002998:	2b08      	cmp	r3, #8
 800299a:	f200 80e1 	bhi.w	8002b60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x34>
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d003      	beq.n	80029ae <HAL_RCC_GetSysClockFreq+0x3a>
 80029a6:	e0db      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029a8:	4b73      	ldr	r3, [pc, #460]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x204>)
 80029aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029ac:	e0db      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ae:	4b73      	ldr	r3, [pc, #460]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x208>)
 80029b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029b2:	e0d8      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b4:	4b6f      	ldr	r3, [pc, #444]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029be:	4b6d      	ldr	r3, [pc, #436]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d063      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ca:	4b6a      	ldr	r3, [pc, #424]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	2200      	movs	r2, #0
 80029d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80029d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
 80029de:	2300      	movs	r3, #0
 80029e0:	637b      	str	r3, [r7, #52]	; 0x34
 80029e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029e6:	4622      	mov	r2, r4
 80029e8:	462b      	mov	r3, r5
 80029ea:	f04f 0000 	mov.w	r0, #0
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	0159      	lsls	r1, r3, #5
 80029f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f8:	0150      	lsls	r0, r2, #5
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4621      	mov	r1, r4
 8002a00:	1a51      	subs	r1, r2, r1
 8002a02:	6139      	str	r1, [r7, #16]
 8002a04:	4629      	mov	r1, r5
 8002a06:	eb63 0301 	sbc.w	r3, r3, r1
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a18:	4659      	mov	r1, fp
 8002a1a:	018b      	lsls	r3, r1, #6
 8002a1c:	4651      	mov	r1, sl
 8002a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a22:	4651      	mov	r1, sl
 8002a24:	018a      	lsls	r2, r1, #6
 8002a26:	4651      	mov	r1, sl
 8002a28:	ebb2 0801 	subs.w	r8, r2, r1
 8002a2c:	4659      	mov	r1, fp
 8002a2e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a46:	4690      	mov	r8, r2
 8002a48:	4699      	mov	r9, r3
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	eb18 0303 	adds.w	r3, r8, r3
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	462b      	mov	r3, r5
 8002a54:	eb49 0303 	adc.w	r3, r9, r3
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a66:	4629      	mov	r1, r5
 8002a68:	024b      	lsls	r3, r1, #9
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a70:	4621      	mov	r1, r4
 8002a72:	024a      	lsls	r2, r1, #9
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a84:	f7fd ff8e 	bl	80009a4 <__aeabi_uldivmod>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a90:	e058      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a92:	4b38      	ldr	r3, [pc, #224]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	099b      	lsrs	r3, r3, #6
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002aac:	4642      	mov	r2, r8
 8002aae:	464b      	mov	r3, r9
 8002ab0:	f04f 0000 	mov.w	r0, #0
 8002ab4:	f04f 0100 	mov.w	r1, #0
 8002ab8:	0159      	lsls	r1, r3, #5
 8002aba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002abe:	0150      	lsls	r0, r2, #5
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002aca:	4649      	mov	r1, r9
 8002acc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002adc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ae0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ae4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ae8:	eb63 050b 	sbc.w	r5, r3, fp
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	00eb      	lsls	r3, r5, #3
 8002af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002afa:	00e2      	lsls	r2, r4, #3
 8002afc:	4614      	mov	r4, r2
 8002afe:	461d      	mov	r5, r3
 8002b00:	4643      	mov	r3, r8
 8002b02:	18e3      	adds	r3, r4, r3
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	464b      	mov	r3, r9
 8002b08:	eb45 0303 	adc.w	r3, r5, r3
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	028b      	lsls	r3, r1, #10
 8002b1e:	4621      	mov	r1, r4
 8002b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b24:	4621      	mov	r1, r4
 8002b26:	028a      	lsls	r2, r1, #10
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	61fa      	str	r2, [r7, #28]
 8002b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b38:	f7fd ff34 	bl	80009a4 <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4613      	mov	r3, r2
 8002b42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b5e:	e002      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3750      	adds	r7, #80	; 0x50
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	007a1200 	.word	0x007a1200

08002b80 <memset>:
 8002b80:	4402      	add	r2, r0
 8002b82:	4603      	mov	r3, r0
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d100      	bne.n	8002b8a <memset+0xa>
 8002b88:	4770      	bx	lr
 8002b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b8e:	e7f9      	b.n	8002b84 <memset+0x4>

08002b90 <__libc_init_array>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	4d0d      	ldr	r5, [pc, #52]	; (8002bc8 <__libc_init_array+0x38>)
 8002b94:	4c0d      	ldr	r4, [pc, #52]	; (8002bcc <__libc_init_array+0x3c>)
 8002b96:	1b64      	subs	r4, r4, r5
 8002b98:	10a4      	asrs	r4, r4, #2
 8002b9a:	2600      	movs	r6, #0
 8002b9c:	42a6      	cmp	r6, r4
 8002b9e:	d109      	bne.n	8002bb4 <__libc_init_array+0x24>
 8002ba0:	4d0b      	ldr	r5, [pc, #44]	; (8002bd0 <__libc_init_array+0x40>)
 8002ba2:	4c0c      	ldr	r4, [pc, #48]	; (8002bd4 <__libc_init_array+0x44>)
 8002ba4:	f001 f8ac 	bl	8003d00 <_init>
 8002ba8:	1b64      	subs	r4, r4, r5
 8002baa:	10a4      	asrs	r4, r4, #2
 8002bac:	2600      	movs	r6, #0
 8002bae:	42a6      	cmp	r6, r4
 8002bb0:	d105      	bne.n	8002bbe <__libc_init_array+0x2e>
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
 8002bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb8:	4798      	blx	r3
 8002bba:	3601      	adds	r6, #1
 8002bbc:	e7ee      	b.n	8002b9c <__libc_init_array+0xc>
 8002bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc2:	4798      	blx	r3
 8002bc4:	3601      	adds	r6, #1
 8002bc6:	e7f2      	b.n	8002bae <__libc_init_array+0x1e>
 8002bc8:	08003f08 	.word	0x08003f08
 8002bcc:	08003f08 	.word	0x08003f08
 8002bd0:	08003f08 	.word	0x08003f08
 8002bd4:	08003f0c 	.word	0x08003f0c

08002bd8 <cos>:
 8002bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002bda:	ec53 2b10 	vmov	r2, r3, d0
 8002bde:	4826      	ldr	r0, [pc, #152]	; (8002c78 <cos+0xa0>)
 8002be0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002be4:	4281      	cmp	r1, r0
 8002be6:	dc06      	bgt.n	8002bf6 <cos+0x1e>
 8002be8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8002c70 <cos+0x98>
 8002bec:	b005      	add	sp, #20
 8002bee:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bf2:	f000 b89d 	b.w	8002d30 <__kernel_cos>
 8002bf6:	4821      	ldr	r0, [pc, #132]	; (8002c7c <cos+0xa4>)
 8002bf8:	4281      	cmp	r1, r0
 8002bfa:	dd09      	ble.n	8002c10 <cos+0x38>
 8002bfc:	ee10 0a10 	vmov	r0, s0
 8002c00:	4619      	mov	r1, r3
 8002c02:	f7fd fc17 	bl	8000434 <__aeabi_dsub>
 8002c06:	ec41 0b10 	vmov	d0, r0, r1
 8002c0a:	b005      	add	sp, #20
 8002c0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c10:	4668      	mov	r0, sp
 8002c12:	f000 fa15 	bl	8003040 <__ieee754_rem_pio2>
 8002c16:	f000 0003 	and.w	r0, r0, #3
 8002c1a:	2801      	cmp	r0, #1
 8002c1c:	d00b      	beq.n	8002c36 <cos+0x5e>
 8002c1e:	2802      	cmp	r0, #2
 8002c20:	d016      	beq.n	8002c50 <cos+0x78>
 8002c22:	b9e0      	cbnz	r0, 8002c5e <cos+0x86>
 8002c24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002c28:	ed9d 0b00 	vldr	d0, [sp]
 8002c2c:	f000 f880 	bl	8002d30 <__kernel_cos>
 8002c30:	ec51 0b10 	vmov	r0, r1, d0
 8002c34:	e7e7      	b.n	8002c06 <cos+0x2e>
 8002c36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002c3a:	ed9d 0b00 	vldr	d0, [sp]
 8002c3e:	f000 f93f 	bl	8002ec0 <__kernel_sin>
 8002c42:	ec53 2b10 	vmov	r2, r3, d0
 8002c46:	ee10 0a10 	vmov	r0, s0
 8002c4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002c4e:	e7da      	b.n	8002c06 <cos+0x2e>
 8002c50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002c54:	ed9d 0b00 	vldr	d0, [sp]
 8002c58:	f000 f86a 	bl	8002d30 <__kernel_cos>
 8002c5c:	e7f1      	b.n	8002c42 <cos+0x6a>
 8002c5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002c62:	ed9d 0b00 	vldr	d0, [sp]
 8002c66:	2001      	movs	r0, #1
 8002c68:	f000 f92a 	bl	8002ec0 <__kernel_sin>
 8002c6c:	e7e0      	b.n	8002c30 <cos+0x58>
 8002c6e:	bf00      	nop
	...
 8002c78:	3fe921fb 	.word	0x3fe921fb
 8002c7c:	7fefffff 	.word	0x7fefffff

08002c80 <sin>:
 8002c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002c82:	ec53 2b10 	vmov	r2, r3, d0
 8002c86:	4828      	ldr	r0, [pc, #160]	; (8002d28 <sin+0xa8>)
 8002c88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002c8c:	4281      	cmp	r1, r0
 8002c8e:	dc07      	bgt.n	8002ca0 <sin+0x20>
 8002c90:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8002d20 <sin+0xa0>
 8002c94:	2000      	movs	r0, #0
 8002c96:	b005      	add	sp, #20
 8002c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c9c:	f000 b910 	b.w	8002ec0 <__kernel_sin>
 8002ca0:	4822      	ldr	r0, [pc, #136]	; (8002d2c <sin+0xac>)
 8002ca2:	4281      	cmp	r1, r0
 8002ca4:	dd09      	ble.n	8002cba <sin+0x3a>
 8002ca6:	ee10 0a10 	vmov	r0, s0
 8002caa:	4619      	mov	r1, r3
 8002cac:	f7fd fbc2 	bl	8000434 <__aeabi_dsub>
 8002cb0:	ec41 0b10 	vmov	d0, r0, r1
 8002cb4:	b005      	add	sp, #20
 8002cb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cba:	4668      	mov	r0, sp
 8002cbc:	f000 f9c0 	bl	8003040 <__ieee754_rem_pio2>
 8002cc0:	f000 0003 	and.w	r0, r0, #3
 8002cc4:	2801      	cmp	r0, #1
 8002cc6:	d00c      	beq.n	8002ce2 <sin+0x62>
 8002cc8:	2802      	cmp	r0, #2
 8002cca:	d011      	beq.n	8002cf0 <sin+0x70>
 8002ccc:	b9f0      	cbnz	r0, 8002d0c <sin+0x8c>
 8002cce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002cd2:	ed9d 0b00 	vldr	d0, [sp]
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	f000 f8f2 	bl	8002ec0 <__kernel_sin>
 8002cdc:	ec51 0b10 	vmov	r0, r1, d0
 8002ce0:	e7e6      	b.n	8002cb0 <sin+0x30>
 8002ce2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002ce6:	ed9d 0b00 	vldr	d0, [sp]
 8002cea:	f000 f821 	bl	8002d30 <__kernel_cos>
 8002cee:	e7f5      	b.n	8002cdc <sin+0x5c>
 8002cf0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002cf4:	ed9d 0b00 	vldr	d0, [sp]
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f000 f8e1 	bl	8002ec0 <__kernel_sin>
 8002cfe:	ec53 2b10 	vmov	r2, r3, d0
 8002d02:	ee10 0a10 	vmov	r0, s0
 8002d06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002d0a:	e7d1      	b.n	8002cb0 <sin+0x30>
 8002d0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002d10:	ed9d 0b00 	vldr	d0, [sp]
 8002d14:	f000 f80c 	bl	8002d30 <__kernel_cos>
 8002d18:	e7f1      	b.n	8002cfe <sin+0x7e>
 8002d1a:	bf00      	nop
 8002d1c:	f3af 8000 	nop.w
	...
 8002d28:	3fe921fb 	.word	0x3fe921fb
 8002d2c:	7fefffff 	.word	0x7fefffff

08002d30 <__kernel_cos>:
 8002d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d34:	ec57 6b10 	vmov	r6, r7, d0
 8002d38:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8002d3c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8002d40:	ed8d 1b00 	vstr	d1, [sp]
 8002d44:	da07      	bge.n	8002d56 <__kernel_cos+0x26>
 8002d46:	ee10 0a10 	vmov	r0, s0
 8002d4a:	4639      	mov	r1, r7
 8002d4c:	f7fd fdb2 	bl	80008b4 <__aeabi_d2iz>
 8002d50:	2800      	cmp	r0, #0
 8002d52:	f000 8088 	beq.w	8002e66 <__kernel_cos+0x136>
 8002d56:	4632      	mov	r2, r6
 8002d58:	463b      	mov	r3, r7
 8002d5a:	4630      	mov	r0, r6
 8002d5c:	4639      	mov	r1, r7
 8002d5e:	f7fd fa3b 	bl	80001d8 <__aeabi_dmul>
 8002d62:	4b51      	ldr	r3, [pc, #324]	; (8002ea8 <__kernel_cos+0x178>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	4604      	mov	r4, r0
 8002d68:	460d      	mov	r5, r1
 8002d6a:	f7fd fa35 	bl	80001d8 <__aeabi_dmul>
 8002d6e:	a340      	add	r3, pc, #256	; (adr r3, 8002e70 <__kernel_cos+0x140>)
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	4682      	mov	sl, r0
 8002d76:	468b      	mov	fp, r1
 8002d78:	4620      	mov	r0, r4
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	f7fd fa2c 	bl	80001d8 <__aeabi_dmul>
 8002d80:	a33d      	add	r3, pc, #244	; (adr r3, 8002e78 <__kernel_cos+0x148>)
 8002d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d86:	f7fd fb57 	bl	8000438 <__adddf3>
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	f7fd fa23 	bl	80001d8 <__aeabi_dmul>
 8002d92:	a33b      	add	r3, pc, #236	; (adr r3, 8002e80 <__kernel_cos+0x150>)
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f7fd fb4c 	bl	8000434 <__aeabi_dsub>
 8002d9c:	4622      	mov	r2, r4
 8002d9e:	462b      	mov	r3, r5
 8002da0:	f7fd fa1a 	bl	80001d8 <__aeabi_dmul>
 8002da4:	a338      	add	r3, pc, #224	; (adr r3, 8002e88 <__kernel_cos+0x158>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	f7fd fb45 	bl	8000438 <__adddf3>
 8002dae:	4622      	mov	r2, r4
 8002db0:	462b      	mov	r3, r5
 8002db2:	f7fd fa11 	bl	80001d8 <__aeabi_dmul>
 8002db6:	a336      	add	r3, pc, #216	; (adr r3, 8002e90 <__kernel_cos+0x160>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f7fd fb3a 	bl	8000434 <__aeabi_dsub>
 8002dc0:	4622      	mov	r2, r4
 8002dc2:	462b      	mov	r3, r5
 8002dc4:	f7fd fa08 	bl	80001d8 <__aeabi_dmul>
 8002dc8:	a333      	add	r3, pc, #204	; (adr r3, 8002e98 <__kernel_cos+0x168>)
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	f7fd fb33 	bl	8000438 <__adddf3>
 8002dd2:	4622      	mov	r2, r4
 8002dd4:	462b      	mov	r3, r5
 8002dd6:	f7fd f9ff 	bl	80001d8 <__aeabi_dmul>
 8002dda:	4622      	mov	r2, r4
 8002ddc:	462b      	mov	r3, r5
 8002dde:	f7fd f9fb 	bl	80001d8 <__aeabi_dmul>
 8002de2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002de6:	4604      	mov	r4, r0
 8002de8:	460d      	mov	r5, r1
 8002dea:	4630      	mov	r0, r6
 8002dec:	4639      	mov	r1, r7
 8002dee:	f7fd f9f3 	bl	80001d8 <__aeabi_dmul>
 8002df2:	460b      	mov	r3, r1
 8002df4:	4602      	mov	r2, r0
 8002df6:	4629      	mov	r1, r5
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f7fd fb1b 	bl	8000434 <__aeabi_dsub>
 8002dfe:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <__kernel_cos+0x17c>)
 8002e00:	4598      	cmp	r8, r3
 8002e02:	4606      	mov	r6, r0
 8002e04:	460f      	mov	r7, r1
 8002e06:	dc10      	bgt.n	8002e2a <__kernel_cos+0xfa>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4650      	mov	r0, sl
 8002e0e:	4659      	mov	r1, fp
 8002e10:	f7fd fb10 	bl	8000434 <__aeabi_dsub>
 8002e14:	460b      	mov	r3, r1
 8002e16:	4926      	ldr	r1, [pc, #152]	; (8002eb0 <__kernel_cos+0x180>)
 8002e18:	4602      	mov	r2, r0
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7fd fb0a 	bl	8000434 <__aeabi_dsub>
 8002e20:	ec41 0b10 	vmov	d0, r0, r1
 8002e24:	b003      	add	sp, #12
 8002e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e2a:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <__kernel_cos+0x184>)
 8002e2c:	4920      	ldr	r1, [pc, #128]	; (8002eb0 <__kernel_cos+0x180>)
 8002e2e:	4598      	cmp	r8, r3
 8002e30:	bfcc      	ite	gt
 8002e32:	4d21      	ldrgt	r5, [pc, #132]	; (8002eb8 <__kernel_cos+0x188>)
 8002e34:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8002e38:	2400      	movs	r4, #0
 8002e3a:	4622      	mov	r2, r4
 8002e3c:	462b      	mov	r3, r5
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f7fd faf8 	bl	8000434 <__aeabi_dsub>
 8002e44:	4622      	mov	r2, r4
 8002e46:	4680      	mov	r8, r0
 8002e48:	4689      	mov	r9, r1
 8002e4a:	462b      	mov	r3, r5
 8002e4c:	4650      	mov	r0, sl
 8002e4e:	4659      	mov	r1, fp
 8002e50:	f7fd faf0 	bl	8000434 <__aeabi_dsub>
 8002e54:	4632      	mov	r2, r6
 8002e56:	463b      	mov	r3, r7
 8002e58:	f7fd faec 	bl	8000434 <__aeabi_dsub>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4640      	mov	r0, r8
 8002e62:	4649      	mov	r1, r9
 8002e64:	e7da      	b.n	8002e1c <__kernel_cos+0xec>
 8002e66:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002ea0 <__kernel_cos+0x170>
 8002e6a:	e7db      	b.n	8002e24 <__kernel_cos+0xf4>
 8002e6c:	f3af 8000 	nop.w
 8002e70:	be8838d4 	.word	0xbe8838d4
 8002e74:	bda8fae9 	.word	0xbda8fae9
 8002e78:	bdb4b1c4 	.word	0xbdb4b1c4
 8002e7c:	3e21ee9e 	.word	0x3e21ee9e
 8002e80:	809c52ad 	.word	0x809c52ad
 8002e84:	3e927e4f 	.word	0x3e927e4f
 8002e88:	19cb1590 	.word	0x19cb1590
 8002e8c:	3efa01a0 	.word	0x3efa01a0
 8002e90:	16c15177 	.word	0x16c15177
 8002e94:	3f56c16c 	.word	0x3f56c16c
 8002e98:	5555554c 	.word	0x5555554c
 8002e9c:	3fa55555 	.word	0x3fa55555
 8002ea0:	00000000 	.word	0x00000000
 8002ea4:	3ff00000 	.word	0x3ff00000
 8002ea8:	3fe00000 	.word	0x3fe00000
 8002eac:	3fd33332 	.word	0x3fd33332
 8002eb0:	3ff00000 	.word	0x3ff00000
 8002eb4:	3fe90000 	.word	0x3fe90000
 8002eb8:	3fd20000 	.word	0x3fd20000
 8002ebc:	00000000 	.word	0x00000000

08002ec0 <__kernel_sin>:
 8002ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ec4:	ed2d 8b04 	vpush	{d8-d9}
 8002ec8:	eeb0 8a41 	vmov.f32	s16, s2
 8002ecc:	eef0 8a61 	vmov.f32	s17, s3
 8002ed0:	ec55 4b10 	vmov	r4, r5, d0
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8002eda:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8002ede:	9001      	str	r0, [sp, #4]
 8002ee0:	da06      	bge.n	8002ef0 <__kernel_sin+0x30>
 8002ee2:	ee10 0a10 	vmov	r0, s0
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	f7fd fce4 	bl	80008b4 <__aeabi_d2iz>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d051      	beq.n	8002f94 <__kernel_sin+0xd4>
 8002ef0:	4622      	mov	r2, r4
 8002ef2:	462b      	mov	r3, r5
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	f7fd f96e 	bl	80001d8 <__aeabi_dmul>
 8002efc:	4682      	mov	sl, r0
 8002efe:	468b      	mov	fp, r1
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4620      	mov	r0, r4
 8002f06:	4629      	mov	r1, r5
 8002f08:	f7fd f966 	bl	80001d8 <__aeabi_dmul>
 8002f0c:	a341      	add	r3, pc, #260	; (adr r3, 8003014 <__kernel_sin+0x154>)
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	4680      	mov	r8, r0
 8002f14:	4689      	mov	r9, r1
 8002f16:	4650      	mov	r0, sl
 8002f18:	4659      	mov	r1, fp
 8002f1a:	f7fd f95d 	bl	80001d8 <__aeabi_dmul>
 8002f1e:	a33f      	add	r3, pc, #252	; (adr r3, 800301c <__kernel_sin+0x15c>)
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f7fd fa86 	bl	8000434 <__aeabi_dsub>
 8002f28:	4652      	mov	r2, sl
 8002f2a:	465b      	mov	r3, fp
 8002f2c:	f7fd f954 	bl	80001d8 <__aeabi_dmul>
 8002f30:	a33c      	add	r3, pc, #240	; (adr r3, 8003024 <__kernel_sin+0x164>)
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	f7fd fa7f 	bl	8000438 <__adddf3>
 8002f3a:	4652      	mov	r2, sl
 8002f3c:	465b      	mov	r3, fp
 8002f3e:	f7fd f94b 	bl	80001d8 <__aeabi_dmul>
 8002f42:	a33a      	add	r3, pc, #232	; (adr r3, 800302c <__kernel_sin+0x16c>)
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	f7fd fa74 	bl	8000434 <__aeabi_dsub>
 8002f4c:	4652      	mov	r2, sl
 8002f4e:	465b      	mov	r3, fp
 8002f50:	f7fd f942 	bl	80001d8 <__aeabi_dmul>
 8002f54:	a337      	add	r3, pc, #220	; (adr r3, 8003034 <__kernel_sin+0x174>)
 8002f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5a:	f7fd fa6d 	bl	8000438 <__adddf3>
 8002f5e:	9b01      	ldr	r3, [sp, #4]
 8002f60:	4606      	mov	r6, r0
 8002f62:	460f      	mov	r7, r1
 8002f64:	b9eb      	cbnz	r3, 8002fa2 <__kernel_sin+0xe2>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4650      	mov	r0, sl
 8002f6c:	4659      	mov	r1, fp
 8002f6e:	f7fd f933 	bl	80001d8 <__aeabi_dmul>
 8002f72:	a325      	add	r3, pc, #148	; (adr r3, 8003008 <__kernel_sin+0x148>)
 8002f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f78:	f7fd fa5c 	bl	8000434 <__aeabi_dsub>
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	464b      	mov	r3, r9
 8002f80:	f7fd f92a 	bl	80001d8 <__aeabi_dmul>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4620      	mov	r0, r4
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	f7fd fa54 	bl	8000438 <__adddf3>
 8002f90:	4604      	mov	r4, r0
 8002f92:	460d      	mov	r5, r1
 8002f94:	ec45 4b10 	vmov	d0, r4, r5
 8002f98:	b003      	add	sp, #12
 8002f9a:	ecbd 8b04 	vpop	{d8-d9}
 8002f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <__kernel_sin+0x150>)
 8002fa4:	ec51 0b18 	vmov	r0, r1, d8
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f7fd f915 	bl	80001d8 <__aeabi_dmul>
 8002fae:	4632      	mov	r2, r6
 8002fb0:	ec41 0b19 	vmov	d9, r0, r1
 8002fb4:	463b      	mov	r3, r7
 8002fb6:	4640      	mov	r0, r8
 8002fb8:	4649      	mov	r1, r9
 8002fba:	f7fd f90d 	bl	80001d8 <__aeabi_dmul>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	ec51 0b19 	vmov	r0, r1, d9
 8002fc6:	f7fd fa35 	bl	8000434 <__aeabi_dsub>
 8002fca:	4652      	mov	r2, sl
 8002fcc:	465b      	mov	r3, fp
 8002fce:	f7fd f903 	bl	80001d8 <__aeabi_dmul>
 8002fd2:	ec53 2b18 	vmov	r2, r3, d8
 8002fd6:	f7fd fa2d 	bl	8000434 <__aeabi_dsub>
 8002fda:	a30b      	add	r3, pc, #44	; (adr r3, 8003008 <__kernel_sin+0x148>)
 8002fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe0:	4606      	mov	r6, r0
 8002fe2:	460f      	mov	r7, r1
 8002fe4:	4640      	mov	r0, r8
 8002fe6:	4649      	mov	r1, r9
 8002fe8:	f7fd f8f6 	bl	80001d8 <__aeabi_dmul>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4630      	mov	r0, r6
 8002ff2:	4639      	mov	r1, r7
 8002ff4:	f7fd fa20 	bl	8000438 <__adddf3>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	4629      	mov	r1, r5
 8003000:	f7fd fa18 	bl	8000434 <__aeabi_dsub>
 8003004:	e7c4      	b.n	8002f90 <__kernel_sin+0xd0>
 8003006:	bf00      	nop
 8003008:	55555549 	.word	0x55555549
 800300c:	3fc55555 	.word	0x3fc55555
 8003010:	3fe00000 	.word	0x3fe00000
 8003014:	5acfd57c 	.word	0x5acfd57c
 8003018:	3de5d93a 	.word	0x3de5d93a
 800301c:	8a2b9ceb 	.word	0x8a2b9ceb
 8003020:	3e5ae5e6 	.word	0x3e5ae5e6
 8003024:	57b1fe7d 	.word	0x57b1fe7d
 8003028:	3ec71de3 	.word	0x3ec71de3
 800302c:	19c161d5 	.word	0x19c161d5
 8003030:	3f2a01a0 	.word	0x3f2a01a0
 8003034:	1110f8a6 	.word	0x1110f8a6
 8003038:	3f811111 	.word	0x3f811111
 800303c:	00000000 	.word	0x00000000

08003040 <__ieee754_rem_pio2>:
 8003040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003044:	ed2d 8b02 	vpush	{d8}
 8003048:	ec55 4b10 	vmov	r4, r5, d0
 800304c:	4bca      	ldr	r3, [pc, #808]	; (8003378 <__ieee754_rem_pio2+0x338>)
 800304e:	b08b      	sub	sp, #44	; 0x2c
 8003050:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003054:	4598      	cmp	r8, r3
 8003056:	4682      	mov	sl, r0
 8003058:	9502      	str	r5, [sp, #8]
 800305a:	dc08      	bgt.n	800306e <__ieee754_rem_pio2+0x2e>
 800305c:	2200      	movs	r2, #0
 800305e:	2300      	movs	r3, #0
 8003060:	ed80 0b00 	vstr	d0, [r0]
 8003064:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003068:	f04f 0b00 	mov.w	fp, #0
 800306c:	e028      	b.n	80030c0 <__ieee754_rem_pio2+0x80>
 800306e:	4bc3      	ldr	r3, [pc, #780]	; (800337c <__ieee754_rem_pio2+0x33c>)
 8003070:	4598      	cmp	r8, r3
 8003072:	dc78      	bgt.n	8003166 <__ieee754_rem_pio2+0x126>
 8003074:	9b02      	ldr	r3, [sp, #8]
 8003076:	4ec2      	ldr	r6, [pc, #776]	; (8003380 <__ieee754_rem_pio2+0x340>)
 8003078:	2b00      	cmp	r3, #0
 800307a:	ee10 0a10 	vmov	r0, s0
 800307e:	a3b0      	add	r3, pc, #704	; (adr r3, 8003340 <__ieee754_rem_pio2+0x300>)
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	4629      	mov	r1, r5
 8003086:	dd39      	ble.n	80030fc <__ieee754_rem_pio2+0xbc>
 8003088:	f7fd f9d4 	bl	8000434 <__aeabi_dsub>
 800308c:	45b0      	cmp	r8, r6
 800308e:	4604      	mov	r4, r0
 8003090:	460d      	mov	r5, r1
 8003092:	d01b      	beq.n	80030cc <__ieee754_rem_pio2+0x8c>
 8003094:	a3ac      	add	r3, pc, #688	; (adr r3, 8003348 <__ieee754_rem_pio2+0x308>)
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f7fd f9cb 	bl	8000434 <__aeabi_dsub>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	e9ca 2300 	strd	r2, r3, [sl]
 80030a6:	4620      	mov	r0, r4
 80030a8:	4629      	mov	r1, r5
 80030aa:	f7fd f9c3 	bl	8000434 <__aeabi_dsub>
 80030ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8003348 <__ieee754_rem_pio2+0x308>)
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	f7fd f9be 	bl	8000434 <__aeabi_dsub>
 80030b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80030bc:	f04f 0b01 	mov.w	fp, #1
 80030c0:	4658      	mov	r0, fp
 80030c2:	b00b      	add	sp, #44	; 0x2c
 80030c4:	ecbd 8b02 	vpop	{d8}
 80030c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8003350 <__ieee754_rem_pio2+0x310>)
 80030ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d2:	f7fd f9af 	bl	8000434 <__aeabi_dsub>
 80030d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8003358 <__ieee754_rem_pio2+0x318>)
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	4604      	mov	r4, r0
 80030de:	460d      	mov	r5, r1
 80030e0:	f7fd f9a8 	bl	8000434 <__aeabi_dsub>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	e9ca 2300 	strd	r2, r3, [sl]
 80030ec:	4620      	mov	r0, r4
 80030ee:	4629      	mov	r1, r5
 80030f0:	f7fd f9a0 	bl	8000434 <__aeabi_dsub>
 80030f4:	a398      	add	r3, pc, #608	; (adr r3, 8003358 <__ieee754_rem_pio2+0x318>)
 80030f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fa:	e7db      	b.n	80030b4 <__ieee754_rem_pio2+0x74>
 80030fc:	f7fd f99c 	bl	8000438 <__adddf3>
 8003100:	45b0      	cmp	r8, r6
 8003102:	4604      	mov	r4, r0
 8003104:	460d      	mov	r5, r1
 8003106:	d016      	beq.n	8003136 <__ieee754_rem_pio2+0xf6>
 8003108:	a38f      	add	r3, pc, #572	; (adr r3, 8003348 <__ieee754_rem_pio2+0x308>)
 800310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310e:	f7fd f993 	bl	8000438 <__adddf3>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	e9ca 2300 	strd	r2, r3, [sl]
 800311a:	4620      	mov	r0, r4
 800311c:	4629      	mov	r1, r5
 800311e:	f7fd f989 	bl	8000434 <__aeabi_dsub>
 8003122:	a389      	add	r3, pc, #548	; (adr r3, 8003348 <__ieee754_rem_pio2+0x308>)
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	f7fd f986 	bl	8000438 <__adddf3>
 800312c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003130:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003134:	e7c4      	b.n	80030c0 <__ieee754_rem_pio2+0x80>
 8003136:	a386      	add	r3, pc, #536	; (adr r3, 8003350 <__ieee754_rem_pio2+0x310>)
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f7fd f97c 	bl	8000438 <__adddf3>
 8003140:	a385      	add	r3, pc, #532	; (adr r3, 8003358 <__ieee754_rem_pio2+0x318>)
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	4604      	mov	r4, r0
 8003148:	460d      	mov	r5, r1
 800314a:	f7fd f975 	bl	8000438 <__adddf3>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	e9ca 2300 	strd	r2, r3, [sl]
 8003156:	4620      	mov	r0, r4
 8003158:	4629      	mov	r1, r5
 800315a:	f7fd f96b 	bl	8000434 <__aeabi_dsub>
 800315e:	a37e      	add	r3, pc, #504	; (adr r3, 8003358 <__ieee754_rem_pio2+0x318>)
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	e7e0      	b.n	8003128 <__ieee754_rem_pio2+0xe8>
 8003166:	4b87      	ldr	r3, [pc, #540]	; (8003384 <__ieee754_rem_pio2+0x344>)
 8003168:	4598      	cmp	r8, r3
 800316a:	f300 80d8 	bgt.w	800331e <__ieee754_rem_pio2+0x2de>
 800316e:	f000 f96d 	bl	800344c <fabs>
 8003172:	ec55 4b10 	vmov	r4, r5, d0
 8003176:	ee10 0a10 	vmov	r0, s0
 800317a:	a379      	add	r3, pc, #484	; (adr r3, 8003360 <__ieee754_rem_pio2+0x320>)
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	4629      	mov	r1, r5
 8003182:	f7fd f829 	bl	80001d8 <__aeabi_dmul>
 8003186:	4b80      	ldr	r3, [pc, #512]	; (8003388 <__ieee754_rem_pio2+0x348>)
 8003188:	2200      	movs	r2, #0
 800318a:	f7fd f955 	bl	8000438 <__adddf3>
 800318e:	f7fd fb91 	bl	80008b4 <__aeabi_d2iz>
 8003192:	4683      	mov	fp, r0
 8003194:	f7fd fa9c 	bl	80006d0 <__aeabi_i2d>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	ec43 2b18 	vmov	d8, r2, r3
 80031a0:	a367      	add	r3, pc, #412	; (adr r3, 8003340 <__ieee754_rem_pio2+0x300>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f7fd f817 	bl	80001d8 <__aeabi_dmul>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4620      	mov	r0, r4
 80031b0:	4629      	mov	r1, r5
 80031b2:	f7fd f93f 	bl	8000434 <__aeabi_dsub>
 80031b6:	a364      	add	r3, pc, #400	; (adr r3, 8003348 <__ieee754_rem_pio2+0x308>)
 80031b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031bc:	4606      	mov	r6, r0
 80031be:	460f      	mov	r7, r1
 80031c0:	ec51 0b18 	vmov	r0, r1, d8
 80031c4:	f7fd f808 	bl	80001d8 <__aeabi_dmul>
 80031c8:	f1bb 0f1f 	cmp.w	fp, #31
 80031cc:	4604      	mov	r4, r0
 80031ce:	460d      	mov	r5, r1
 80031d0:	dc0d      	bgt.n	80031ee <__ieee754_rem_pio2+0x1ae>
 80031d2:	4b6e      	ldr	r3, [pc, #440]	; (800338c <__ieee754_rem_pio2+0x34c>)
 80031d4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80031d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031dc:	4543      	cmp	r3, r8
 80031de:	d006      	beq.n	80031ee <__ieee754_rem_pio2+0x1ae>
 80031e0:	4622      	mov	r2, r4
 80031e2:	462b      	mov	r3, r5
 80031e4:	4630      	mov	r0, r6
 80031e6:	4639      	mov	r1, r7
 80031e8:	f7fd f924 	bl	8000434 <__aeabi_dsub>
 80031ec:	e00e      	b.n	800320c <__ieee754_rem_pio2+0x1cc>
 80031ee:	462b      	mov	r3, r5
 80031f0:	4622      	mov	r2, r4
 80031f2:	4630      	mov	r0, r6
 80031f4:	4639      	mov	r1, r7
 80031f6:	f7fd f91d 	bl	8000434 <__aeabi_dsub>
 80031fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80031fe:	9303      	str	r3, [sp, #12]
 8003200:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003204:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003208:	2b10      	cmp	r3, #16
 800320a:	dc02      	bgt.n	8003212 <__ieee754_rem_pio2+0x1d2>
 800320c:	e9ca 0100 	strd	r0, r1, [sl]
 8003210:	e039      	b.n	8003286 <__ieee754_rem_pio2+0x246>
 8003212:	a34f      	add	r3, pc, #316	; (adr r3, 8003350 <__ieee754_rem_pio2+0x310>)
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	ec51 0b18 	vmov	r0, r1, d8
 800321c:	f7fc ffdc 	bl	80001d8 <__aeabi_dmul>
 8003220:	4604      	mov	r4, r0
 8003222:	460d      	mov	r5, r1
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4630      	mov	r0, r6
 800322a:	4639      	mov	r1, r7
 800322c:	f7fd f902 	bl	8000434 <__aeabi_dsub>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4680      	mov	r8, r0
 8003236:	4689      	mov	r9, r1
 8003238:	4630      	mov	r0, r6
 800323a:	4639      	mov	r1, r7
 800323c:	f7fd f8fa 	bl	8000434 <__aeabi_dsub>
 8003240:	4622      	mov	r2, r4
 8003242:	462b      	mov	r3, r5
 8003244:	f7fd f8f6 	bl	8000434 <__aeabi_dsub>
 8003248:	a343      	add	r3, pc, #268	; (adr r3, 8003358 <__ieee754_rem_pio2+0x318>)
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	4604      	mov	r4, r0
 8003250:	460d      	mov	r5, r1
 8003252:	ec51 0b18 	vmov	r0, r1, d8
 8003256:	f7fc ffbf 	bl	80001d8 <__aeabi_dmul>
 800325a:	4622      	mov	r2, r4
 800325c:	462b      	mov	r3, r5
 800325e:	f7fd f8e9 	bl	8000434 <__aeabi_dsub>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4604      	mov	r4, r0
 8003268:	460d      	mov	r5, r1
 800326a:	4640      	mov	r0, r8
 800326c:	4649      	mov	r1, r9
 800326e:	f7fd f8e1 	bl	8000434 <__aeabi_dsub>
 8003272:	9a03      	ldr	r2, [sp, #12]
 8003274:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b31      	cmp	r3, #49	; 0x31
 800327c:	dc24      	bgt.n	80032c8 <__ieee754_rem_pio2+0x288>
 800327e:	e9ca 0100 	strd	r0, r1, [sl]
 8003282:	4646      	mov	r6, r8
 8003284:	464f      	mov	r7, r9
 8003286:	e9da 8900 	ldrd	r8, r9, [sl]
 800328a:	4630      	mov	r0, r6
 800328c:	4642      	mov	r2, r8
 800328e:	464b      	mov	r3, r9
 8003290:	4639      	mov	r1, r7
 8003292:	f7fd f8cf 	bl	8000434 <__aeabi_dsub>
 8003296:	462b      	mov	r3, r5
 8003298:	4622      	mov	r2, r4
 800329a:	f7fd f8cb 	bl	8000434 <__aeabi_dsub>
 800329e:	9b02      	ldr	r3, [sp, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80032a6:	f6bf af0b 	bge.w	80030c0 <__ieee754_rem_pio2+0x80>
 80032aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80032ae:	f8ca 3004 	str.w	r3, [sl, #4]
 80032b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80032b6:	f8ca 8000 	str.w	r8, [sl]
 80032ba:	f8ca 0008 	str.w	r0, [sl, #8]
 80032be:	f8ca 300c 	str.w	r3, [sl, #12]
 80032c2:	f1cb 0b00 	rsb	fp, fp, #0
 80032c6:	e6fb      	b.n	80030c0 <__ieee754_rem_pio2+0x80>
 80032c8:	a327      	add	r3, pc, #156	; (adr r3, 8003368 <__ieee754_rem_pio2+0x328>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	ec51 0b18 	vmov	r0, r1, d8
 80032d2:	f7fc ff81 	bl	80001d8 <__aeabi_dmul>
 80032d6:	4604      	mov	r4, r0
 80032d8:	460d      	mov	r5, r1
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4640      	mov	r0, r8
 80032e0:	4649      	mov	r1, r9
 80032e2:	f7fd f8a7 	bl	8000434 <__aeabi_dsub>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4606      	mov	r6, r0
 80032ec:	460f      	mov	r7, r1
 80032ee:	4640      	mov	r0, r8
 80032f0:	4649      	mov	r1, r9
 80032f2:	f7fd f89f 	bl	8000434 <__aeabi_dsub>
 80032f6:	4622      	mov	r2, r4
 80032f8:	462b      	mov	r3, r5
 80032fa:	f7fd f89b 	bl	8000434 <__aeabi_dsub>
 80032fe:	a31c      	add	r3, pc, #112	; (adr r3, 8003370 <__ieee754_rem_pio2+0x330>)
 8003300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003304:	4604      	mov	r4, r0
 8003306:	460d      	mov	r5, r1
 8003308:	ec51 0b18 	vmov	r0, r1, d8
 800330c:	f7fc ff64 	bl	80001d8 <__aeabi_dmul>
 8003310:	4622      	mov	r2, r4
 8003312:	462b      	mov	r3, r5
 8003314:	f7fd f88e 	bl	8000434 <__aeabi_dsub>
 8003318:	4604      	mov	r4, r0
 800331a:	460d      	mov	r5, r1
 800331c:	e760      	b.n	80031e0 <__ieee754_rem_pio2+0x1a0>
 800331e:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <__ieee754_rem_pio2+0x350>)
 8003320:	4598      	cmp	r8, r3
 8003322:	dd37      	ble.n	8003394 <__ieee754_rem_pio2+0x354>
 8003324:	ee10 2a10 	vmov	r2, s0
 8003328:	462b      	mov	r3, r5
 800332a:	4620      	mov	r0, r4
 800332c:	4629      	mov	r1, r5
 800332e:	f7fd f881 	bl	8000434 <__aeabi_dsub>
 8003332:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003336:	e9ca 0100 	strd	r0, r1, [sl]
 800333a:	e695      	b.n	8003068 <__ieee754_rem_pio2+0x28>
 800333c:	f3af 8000 	nop.w
 8003340:	54400000 	.word	0x54400000
 8003344:	3ff921fb 	.word	0x3ff921fb
 8003348:	1a626331 	.word	0x1a626331
 800334c:	3dd0b461 	.word	0x3dd0b461
 8003350:	1a600000 	.word	0x1a600000
 8003354:	3dd0b461 	.word	0x3dd0b461
 8003358:	2e037073 	.word	0x2e037073
 800335c:	3ba3198a 	.word	0x3ba3198a
 8003360:	6dc9c883 	.word	0x6dc9c883
 8003364:	3fe45f30 	.word	0x3fe45f30
 8003368:	2e000000 	.word	0x2e000000
 800336c:	3ba3198a 	.word	0x3ba3198a
 8003370:	252049c1 	.word	0x252049c1
 8003374:	397b839a 	.word	0x397b839a
 8003378:	3fe921fb 	.word	0x3fe921fb
 800337c:	4002d97b 	.word	0x4002d97b
 8003380:	3ff921fb 	.word	0x3ff921fb
 8003384:	413921fb 	.word	0x413921fb
 8003388:	3fe00000 	.word	0x3fe00000
 800338c:	08003d28 	.word	0x08003d28
 8003390:	7fefffff 	.word	0x7fefffff
 8003394:	ea4f 5628 	mov.w	r6, r8, asr #20
 8003398:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800339c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80033a0:	4620      	mov	r0, r4
 80033a2:	460d      	mov	r5, r1
 80033a4:	f7fd fa86 	bl	80008b4 <__aeabi_d2iz>
 80033a8:	f7fd f992 	bl	80006d0 <__aeabi_i2d>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4620      	mov	r0, r4
 80033b2:	4629      	mov	r1, r5
 80033b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80033b8:	f7fd f83c 	bl	8000434 <__aeabi_dsub>
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <__ieee754_rem_pio2+0x404>)
 80033be:	2200      	movs	r2, #0
 80033c0:	f7fc ff0a 	bl	80001d8 <__aeabi_dmul>
 80033c4:	460d      	mov	r5, r1
 80033c6:	4604      	mov	r4, r0
 80033c8:	f7fd fa74 	bl	80008b4 <__aeabi_d2iz>
 80033cc:	f7fd f980 	bl	80006d0 <__aeabi_i2d>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4620      	mov	r0, r4
 80033d6:	4629      	mov	r1, r5
 80033d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80033dc:	f7fd f82a 	bl	8000434 <__aeabi_dsub>
 80033e0:	4b18      	ldr	r3, [pc, #96]	; (8003444 <__ieee754_rem_pio2+0x404>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	f7fc fef8 	bl	80001d8 <__aeabi_dmul>
 80033e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80033ec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80033f0:	2703      	movs	r7, #3
 80033f2:	2400      	movs	r4, #0
 80033f4:	2500      	movs	r5, #0
 80033f6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80033fa:	4622      	mov	r2, r4
 80033fc:	462b      	mov	r3, r5
 80033fe:	46b9      	mov	r9, r7
 8003400:	3f01      	subs	r7, #1
 8003402:	f7fd fa25 	bl	8000850 <__aeabi_dcmpeq>
 8003406:	2800      	cmp	r0, #0
 8003408:	d1f5      	bne.n	80033f6 <__ieee754_rem_pio2+0x3b6>
 800340a:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <__ieee754_rem_pio2+0x408>)
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	2302      	movs	r3, #2
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	4632      	mov	r2, r6
 8003414:	464b      	mov	r3, r9
 8003416:	4651      	mov	r1, sl
 8003418:	a804      	add	r0, sp, #16
 800341a:	f000 f821 	bl	8003460 <__kernel_rem_pio2>
 800341e:	9b02      	ldr	r3, [sp, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	4683      	mov	fp, r0
 8003424:	f6bf ae4c 	bge.w	80030c0 <__ieee754_rem_pio2+0x80>
 8003428:	e9da 2100 	ldrd	r2, r1, [sl]
 800342c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003430:	e9ca 2300 	strd	r2, r3, [sl]
 8003434:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8003438:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800343c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8003440:	e73f      	b.n	80032c2 <__ieee754_rem_pio2+0x282>
 8003442:	bf00      	nop
 8003444:	41700000 	.word	0x41700000
 8003448:	08003da8 	.word	0x08003da8

0800344c <fabs>:
 800344c:	ec51 0b10 	vmov	r0, r1, d0
 8003450:	ee10 2a10 	vmov	r2, s0
 8003454:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003458:	ec43 2b10 	vmov	d0, r2, r3
 800345c:	4770      	bx	lr
	...

08003460 <__kernel_rem_pio2>:
 8003460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003464:	ed2d 8b02 	vpush	{d8}
 8003468:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800346c:	f112 0f14 	cmn.w	r2, #20
 8003470:	9306      	str	r3, [sp, #24]
 8003472:	9104      	str	r1, [sp, #16]
 8003474:	4bc2      	ldr	r3, [pc, #776]	; (8003780 <__kernel_rem_pio2+0x320>)
 8003476:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003478:	9009      	str	r0, [sp, #36]	; 0x24
 800347a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	9b06      	ldr	r3, [sp, #24]
 8003482:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003486:	bfa8      	it	ge
 8003488:	1ed4      	subge	r4, r2, #3
 800348a:	9305      	str	r3, [sp, #20]
 800348c:	bfb2      	itee	lt
 800348e:	2400      	movlt	r4, #0
 8003490:	2318      	movge	r3, #24
 8003492:	fb94 f4f3 	sdivge	r4, r4, r3
 8003496:	f06f 0317 	mvn.w	r3, #23
 800349a:	fb04 3303 	mla	r3, r4, r3, r3
 800349e:	eb03 0a02 	add.w	sl, r3, r2
 80034a2:	9b00      	ldr	r3, [sp, #0]
 80034a4:	9a05      	ldr	r2, [sp, #20]
 80034a6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8003770 <__kernel_rem_pio2+0x310>
 80034aa:	eb03 0802 	add.w	r8, r3, r2
 80034ae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80034b0:	1aa7      	subs	r7, r4, r2
 80034b2:	ae20      	add	r6, sp, #128	; 0x80
 80034b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80034b8:	2500      	movs	r5, #0
 80034ba:	4545      	cmp	r5, r8
 80034bc:	dd13      	ble.n	80034e6 <__kernel_rem_pio2+0x86>
 80034be:	9b06      	ldr	r3, [sp, #24]
 80034c0:	aa20      	add	r2, sp, #128	; 0x80
 80034c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80034c6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80034ca:	f04f 0800 	mov.w	r8, #0
 80034ce:	9b00      	ldr	r3, [sp, #0]
 80034d0:	4598      	cmp	r8, r3
 80034d2:	dc31      	bgt.n	8003538 <__kernel_rem_pio2+0xd8>
 80034d4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8003770 <__kernel_rem_pio2+0x310>
 80034d8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80034dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80034e0:	462f      	mov	r7, r5
 80034e2:	2600      	movs	r6, #0
 80034e4:	e01b      	b.n	800351e <__kernel_rem_pio2+0xbe>
 80034e6:	42ef      	cmn	r7, r5
 80034e8:	d407      	bmi.n	80034fa <__kernel_rem_pio2+0x9a>
 80034ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80034ee:	f7fd f8ef 	bl	80006d0 <__aeabi_i2d>
 80034f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80034f6:	3501      	adds	r5, #1
 80034f8:	e7df      	b.n	80034ba <__kernel_rem_pio2+0x5a>
 80034fa:	ec51 0b18 	vmov	r0, r1, d8
 80034fe:	e7f8      	b.n	80034f2 <__kernel_rem_pio2+0x92>
 8003500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003504:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003508:	f7fc fe66 	bl	80001d8 <__aeabi_dmul>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003514:	f7fc ff90 	bl	8000438 <__adddf3>
 8003518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800351c:	3601      	adds	r6, #1
 800351e:	9b05      	ldr	r3, [sp, #20]
 8003520:	429e      	cmp	r6, r3
 8003522:	f1a7 0708 	sub.w	r7, r7, #8
 8003526:	ddeb      	ble.n	8003500 <__kernel_rem_pio2+0xa0>
 8003528:	ed9d 7b02 	vldr	d7, [sp, #8]
 800352c:	f108 0801 	add.w	r8, r8, #1
 8003530:	ecab 7b02 	vstmia	fp!, {d7}
 8003534:	3508      	adds	r5, #8
 8003536:	e7ca      	b.n	80034ce <__kernel_rem_pio2+0x6e>
 8003538:	9b00      	ldr	r3, [sp, #0]
 800353a:	aa0c      	add	r2, sp, #48	; 0x30
 800353c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003540:	930b      	str	r3, [sp, #44]	; 0x2c
 8003542:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003544:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003548:	9c00      	ldr	r4, [sp, #0]
 800354a:	930a      	str	r3, [sp, #40]	; 0x28
 800354c:	00e3      	lsls	r3, r4, #3
 800354e:	9308      	str	r3, [sp, #32]
 8003550:	ab98      	add	r3, sp, #608	; 0x260
 8003552:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003556:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800355a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800355e:	ab70      	add	r3, sp, #448	; 0x1c0
 8003560:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8003564:	46c3      	mov	fp, r8
 8003566:	46a1      	mov	r9, r4
 8003568:	f1b9 0f00 	cmp.w	r9, #0
 800356c:	f1a5 0508 	sub.w	r5, r5, #8
 8003570:	dc77      	bgt.n	8003662 <__kernel_rem_pio2+0x202>
 8003572:	ec47 6b10 	vmov	d0, r6, r7
 8003576:	4650      	mov	r0, sl
 8003578:	f000 fac2 	bl	8003b00 <scalbn>
 800357c:	ec57 6b10 	vmov	r6, r7, d0
 8003580:	2200      	movs	r2, #0
 8003582:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003586:	ee10 0a10 	vmov	r0, s0
 800358a:	4639      	mov	r1, r7
 800358c:	f7fc fe24 	bl	80001d8 <__aeabi_dmul>
 8003590:	ec41 0b10 	vmov	d0, r0, r1
 8003594:	f000 fb34 	bl	8003c00 <floor>
 8003598:	4b7a      	ldr	r3, [pc, #488]	; (8003784 <__kernel_rem_pio2+0x324>)
 800359a:	ec51 0b10 	vmov	r0, r1, d0
 800359e:	2200      	movs	r2, #0
 80035a0:	f7fc fe1a 	bl	80001d8 <__aeabi_dmul>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4630      	mov	r0, r6
 80035aa:	4639      	mov	r1, r7
 80035ac:	f7fc ff42 	bl	8000434 <__aeabi_dsub>
 80035b0:	460f      	mov	r7, r1
 80035b2:	4606      	mov	r6, r0
 80035b4:	f7fd f97e 	bl	80008b4 <__aeabi_d2iz>
 80035b8:	9002      	str	r0, [sp, #8]
 80035ba:	f7fd f889 	bl	80006d0 <__aeabi_i2d>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4630      	mov	r0, r6
 80035c4:	4639      	mov	r1, r7
 80035c6:	f7fc ff35 	bl	8000434 <__aeabi_dsub>
 80035ca:	f1ba 0f00 	cmp.w	sl, #0
 80035ce:	4606      	mov	r6, r0
 80035d0:	460f      	mov	r7, r1
 80035d2:	dd6d      	ble.n	80036b0 <__kernel_rem_pio2+0x250>
 80035d4:	1e61      	subs	r1, r4, #1
 80035d6:	ab0c      	add	r3, sp, #48	; 0x30
 80035d8:	9d02      	ldr	r5, [sp, #8]
 80035da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80035de:	f1ca 0018 	rsb	r0, sl, #24
 80035e2:	fa43 f200 	asr.w	r2, r3, r0
 80035e6:	4415      	add	r5, r2
 80035e8:	4082      	lsls	r2, r0
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	aa0c      	add	r2, sp, #48	; 0x30
 80035ee:	9502      	str	r5, [sp, #8]
 80035f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80035f4:	f1ca 0217 	rsb	r2, sl, #23
 80035f8:	fa43 fb02 	asr.w	fp, r3, r2
 80035fc:	f1bb 0f00 	cmp.w	fp, #0
 8003600:	dd65      	ble.n	80036ce <__kernel_rem_pio2+0x26e>
 8003602:	9b02      	ldr	r3, [sp, #8]
 8003604:	2200      	movs	r2, #0
 8003606:	3301      	adds	r3, #1
 8003608:	9302      	str	r3, [sp, #8]
 800360a:	4615      	mov	r5, r2
 800360c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003610:	4294      	cmp	r4, r2
 8003612:	f300 809f 	bgt.w	8003754 <__kernel_rem_pio2+0x2f4>
 8003616:	f1ba 0f00 	cmp.w	sl, #0
 800361a:	dd07      	ble.n	800362c <__kernel_rem_pio2+0x1cc>
 800361c:	f1ba 0f01 	cmp.w	sl, #1
 8003620:	f000 80c1 	beq.w	80037a6 <__kernel_rem_pio2+0x346>
 8003624:	f1ba 0f02 	cmp.w	sl, #2
 8003628:	f000 80c7 	beq.w	80037ba <__kernel_rem_pio2+0x35a>
 800362c:	f1bb 0f02 	cmp.w	fp, #2
 8003630:	d14d      	bne.n	80036ce <__kernel_rem_pio2+0x26e>
 8003632:	4632      	mov	r2, r6
 8003634:	463b      	mov	r3, r7
 8003636:	4954      	ldr	r1, [pc, #336]	; (8003788 <__kernel_rem_pio2+0x328>)
 8003638:	2000      	movs	r0, #0
 800363a:	f7fc fefb 	bl	8000434 <__aeabi_dsub>
 800363e:	4606      	mov	r6, r0
 8003640:	460f      	mov	r7, r1
 8003642:	2d00      	cmp	r5, #0
 8003644:	d043      	beq.n	80036ce <__kernel_rem_pio2+0x26e>
 8003646:	4650      	mov	r0, sl
 8003648:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8003778 <__kernel_rem_pio2+0x318>
 800364c:	f000 fa58 	bl	8003b00 <scalbn>
 8003650:	4630      	mov	r0, r6
 8003652:	4639      	mov	r1, r7
 8003654:	ec53 2b10 	vmov	r2, r3, d0
 8003658:	f7fc feec 	bl	8000434 <__aeabi_dsub>
 800365c:	4606      	mov	r6, r0
 800365e:	460f      	mov	r7, r1
 8003660:	e035      	b.n	80036ce <__kernel_rem_pio2+0x26e>
 8003662:	4b4a      	ldr	r3, [pc, #296]	; (800378c <__kernel_rem_pio2+0x32c>)
 8003664:	2200      	movs	r2, #0
 8003666:	4630      	mov	r0, r6
 8003668:	4639      	mov	r1, r7
 800366a:	f7fc fdb5 	bl	80001d8 <__aeabi_dmul>
 800366e:	f7fd f921 	bl	80008b4 <__aeabi_d2iz>
 8003672:	f7fd f82d 	bl	80006d0 <__aeabi_i2d>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	ec43 2b18 	vmov	d8, r2, r3
 800367e:	4b44      	ldr	r3, [pc, #272]	; (8003790 <__kernel_rem_pio2+0x330>)
 8003680:	2200      	movs	r2, #0
 8003682:	f7fc fda9 	bl	80001d8 <__aeabi_dmul>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4630      	mov	r0, r6
 800368c:	4639      	mov	r1, r7
 800368e:	f7fc fed1 	bl	8000434 <__aeabi_dsub>
 8003692:	f7fd f90f 	bl	80008b4 <__aeabi_d2iz>
 8003696:	e9d5 2300 	ldrd	r2, r3, [r5]
 800369a:	f84b 0b04 	str.w	r0, [fp], #4
 800369e:	ec51 0b18 	vmov	r0, r1, d8
 80036a2:	f7fc fec9 	bl	8000438 <__adddf3>
 80036a6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80036aa:	4606      	mov	r6, r0
 80036ac:	460f      	mov	r7, r1
 80036ae:	e75b      	b.n	8003568 <__kernel_rem_pio2+0x108>
 80036b0:	d106      	bne.n	80036c0 <__kernel_rem_pio2+0x260>
 80036b2:	1e63      	subs	r3, r4, #1
 80036b4:	aa0c      	add	r2, sp, #48	; 0x30
 80036b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ba:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80036be:	e79d      	b.n	80035fc <__kernel_rem_pio2+0x19c>
 80036c0:	4b34      	ldr	r3, [pc, #208]	; (8003794 <__kernel_rem_pio2+0x334>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	f7fd f8e2 	bl	800088c <__aeabi_dcmpge>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d140      	bne.n	800374e <__kernel_rem_pio2+0x2ee>
 80036cc:	4683      	mov	fp, r0
 80036ce:	2200      	movs	r2, #0
 80036d0:	2300      	movs	r3, #0
 80036d2:	4630      	mov	r0, r6
 80036d4:	4639      	mov	r1, r7
 80036d6:	f7fd f8bb 	bl	8000850 <__aeabi_dcmpeq>
 80036da:	2800      	cmp	r0, #0
 80036dc:	f000 80c1 	beq.w	8003862 <__kernel_rem_pio2+0x402>
 80036e0:	1e65      	subs	r5, r4, #1
 80036e2:	462b      	mov	r3, r5
 80036e4:	2200      	movs	r2, #0
 80036e6:	9900      	ldr	r1, [sp, #0]
 80036e8:	428b      	cmp	r3, r1
 80036ea:	da6d      	bge.n	80037c8 <__kernel_rem_pio2+0x368>
 80036ec:	2a00      	cmp	r2, #0
 80036ee:	f000 808a 	beq.w	8003806 <__kernel_rem_pio2+0x3a6>
 80036f2:	ab0c      	add	r3, sp, #48	; 0x30
 80036f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80036f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80ae 	beq.w	800385e <__kernel_rem_pio2+0x3fe>
 8003702:	4650      	mov	r0, sl
 8003704:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8003778 <__kernel_rem_pio2+0x318>
 8003708:	f000 f9fa 	bl	8003b00 <scalbn>
 800370c:	1c6b      	adds	r3, r5, #1
 800370e:	00da      	lsls	r2, r3, #3
 8003710:	9205      	str	r2, [sp, #20]
 8003712:	ec57 6b10 	vmov	r6, r7, d0
 8003716:	aa70      	add	r2, sp, #448	; 0x1c0
 8003718:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800378c <__kernel_rem_pio2+0x32c>
 800371c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8003720:	462c      	mov	r4, r5
 8003722:	f04f 0800 	mov.w	r8, #0
 8003726:	2c00      	cmp	r4, #0
 8003728:	f280 80d4 	bge.w	80038d4 <__kernel_rem_pio2+0x474>
 800372c:	462c      	mov	r4, r5
 800372e:	2c00      	cmp	r4, #0
 8003730:	f2c0 8102 	blt.w	8003938 <__kernel_rem_pio2+0x4d8>
 8003734:	4b18      	ldr	r3, [pc, #96]	; (8003798 <__kernel_rem_pio2+0x338>)
 8003736:	461e      	mov	r6, r3
 8003738:	ab70      	add	r3, sp, #448	; 0x1c0
 800373a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800373e:	1b2b      	subs	r3, r5, r4
 8003740:	f04f 0900 	mov.w	r9, #0
 8003744:	f04f 0a00 	mov.w	sl, #0
 8003748:	2700      	movs	r7, #0
 800374a:	9306      	str	r3, [sp, #24]
 800374c:	e0e6      	b.n	800391c <__kernel_rem_pio2+0x4bc>
 800374e:	f04f 0b02 	mov.w	fp, #2
 8003752:	e756      	b.n	8003602 <__kernel_rem_pio2+0x1a2>
 8003754:	f8d8 3000 	ldr.w	r3, [r8]
 8003758:	bb05      	cbnz	r5, 800379c <__kernel_rem_pio2+0x33c>
 800375a:	b123      	cbz	r3, 8003766 <__kernel_rem_pio2+0x306>
 800375c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003760:	f8c8 3000 	str.w	r3, [r8]
 8003764:	2301      	movs	r3, #1
 8003766:	3201      	adds	r2, #1
 8003768:	f108 0804 	add.w	r8, r8, #4
 800376c:	461d      	mov	r5, r3
 800376e:	e74f      	b.n	8003610 <__kernel_rem_pio2+0x1b0>
	...
 800377c:	3ff00000 	.word	0x3ff00000
 8003780:	08003ef0 	.word	0x08003ef0
 8003784:	40200000 	.word	0x40200000
 8003788:	3ff00000 	.word	0x3ff00000
 800378c:	3e700000 	.word	0x3e700000
 8003790:	41700000 	.word	0x41700000
 8003794:	3fe00000 	.word	0x3fe00000
 8003798:	08003eb0 	.word	0x08003eb0
 800379c:	1acb      	subs	r3, r1, r3
 800379e:	f8c8 3000 	str.w	r3, [r8]
 80037a2:	462b      	mov	r3, r5
 80037a4:	e7df      	b.n	8003766 <__kernel_rem_pio2+0x306>
 80037a6:	1e62      	subs	r2, r4, #1
 80037a8:	ab0c      	add	r3, sp, #48	; 0x30
 80037aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80037b2:	a90c      	add	r1, sp, #48	; 0x30
 80037b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80037b8:	e738      	b.n	800362c <__kernel_rem_pio2+0x1cc>
 80037ba:	1e62      	subs	r2, r4, #1
 80037bc:	ab0c      	add	r3, sp, #48	; 0x30
 80037be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80037c6:	e7f4      	b.n	80037b2 <__kernel_rem_pio2+0x352>
 80037c8:	a90c      	add	r1, sp, #48	; 0x30
 80037ca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	430a      	orrs	r2, r1
 80037d2:	e788      	b.n	80036e6 <__kernel_rem_pio2+0x286>
 80037d4:	3301      	adds	r3, #1
 80037d6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80037da:	2900      	cmp	r1, #0
 80037dc:	d0fa      	beq.n	80037d4 <__kernel_rem_pio2+0x374>
 80037de:	9a08      	ldr	r2, [sp, #32]
 80037e0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80037e4:	446a      	add	r2, sp
 80037e6:	3a98      	subs	r2, #152	; 0x98
 80037e8:	9208      	str	r2, [sp, #32]
 80037ea:	9a06      	ldr	r2, [sp, #24]
 80037ec:	a920      	add	r1, sp, #128	; 0x80
 80037ee:	18a2      	adds	r2, r4, r2
 80037f0:	18e3      	adds	r3, r4, r3
 80037f2:	f104 0801 	add.w	r8, r4, #1
 80037f6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80037fa:	9302      	str	r3, [sp, #8]
 80037fc:	9b02      	ldr	r3, [sp, #8]
 80037fe:	4543      	cmp	r3, r8
 8003800:	da04      	bge.n	800380c <__kernel_rem_pio2+0x3ac>
 8003802:	461c      	mov	r4, r3
 8003804:	e6a2      	b.n	800354c <__kernel_rem_pio2+0xec>
 8003806:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003808:	2301      	movs	r3, #1
 800380a:	e7e4      	b.n	80037d6 <__kernel_rem_pio2+0x376>
 800380c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800380e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003812:	f7fc ff5d 	bl	80006d0 <__aeabi_i2d>
 8003816:	e8e5 0102 	strd	r0, r1, [r5], #8
 800381a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800381c:	46ab      	mov	fp, r5
 800381e:	461c      	mov	r4, r3
 8003820:	f04f 0900 	mov.w	r9, #0
 8003824:	2600      	movs	r6, #0
 8003826:	2700      	movs	r7, #0
 8003828:	9b05      	ldr	r3, [sp, #20]
 800382a:	4599      	cmp	r9, r3
 800382c:	dd06      	ble.n	800383c <__kernel_rem_pio2+0x3dc>
 800382e:	9b08      	ldr	r3, [sp, #32]
 8003830:	e8e3 6702 	strd	r6, r7, [r3], #8
 8003834:	f108 0801 	add.w	r8, r8, #1
 8003838:	9308      	str	r3, [sp, #32]
 800383a:	e7df      	b.n	80037fc <__kernel_rem_pio2+0x39c>
 800383c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003840:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003844:	f7fc fcc8 	bl	80001d8 <__aeabi_dmul>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4630      	mov	r0, r6
 800384e:	4639      	mov	r1, r7
 8003850:	f7fc fdf2 	bl	8000438 <__adddf3>
 8003854:	f109 0901 	add.w	r9, r9, #1
 8003858:	4606      	mov	r6, r0
 800385a:	460f      	mov	r7, r1
 800385c:	e7e4      	b.n	8003828 <__kernel_rem_pio2+0x3c8>
 800385e:	3d01      	subs	r5, #1
 8003860:	e747      	b.n	80036f2 <__kernel_rem_pio2+0x292>
 8003862:	ec47 6b10 	vmov	d0, r6, r7
 8003866:	f1ca 0000 	rsb	r0, sl, #0
 800386a:	f000 f949 	bl	8003b00 <scalbn>
 800386e:	ec57 6b10 	vmov	r6, r7, d0
 8003872:	4ba0      	ldr	r3, [pc, #640]	; (8003af4 <__kernel_rem_pio2+0x694>)
 8003874:	ee10 0a10 	vmov	r0, s0
 8003878:	2200      	movs	r2, #0
 800387a:	4639      	mov	r1, r7
 800387c:	f7fd f806 	bl	800088c <__aeabi_dcmpge>
 8003880:	b1f8      	cbz	r0, 80038c2 <__kernel_rem_pio2+0x462>
 8003882:	4b9d      	ldr	r3, [pc, #628]	; (8003af8 <__kernel_rem_pio2+0x698>)
 8003884:	2200      	movs	r2, #0
 8003886:	4630      	mov	r0, r6
 8003888:	4639      	mov	r1, r7
 800388a:	f7fc fca5 	bl	80001d8 <__aeabi_dmul>
 800388e:	f7fd f811 	bl	80008b4 <__aeabi_d2iz>
 8003892:	4680      	mov	r8, r0
 8003894:	f7fc ff1c 	bl	80006d0 <__aeabi_i2d>
 8003898:	4b96      	ldr	r3, [pc, #600]	; (8003af4 <__kernel_rem_pio2+0x694>)
 800389a:	2200      	movs	r2, #0
 800389c:	f7fc fc9c 	bl	80001d8 <__aeabi_dmul>
 80038a0:	460b      	mov	r3, r1
 80038a2:	4602      	mov	r2, r0
 80038a4:	4639      	mov	r1, r7
 80038a6:	4630      	mov	r0, r6
 80038a8:	f7fc fdc4 	bl	8000434 <__aeabi_dsub>
 80038ac:	f7fd f802 	bl	80008b4 <__aeabi_d2iz>
 80038b0:	1c65      	adds	r5, r4, #1
 80038b2:	ab0c      	add	r3, sp, #48	; 0x30
 80038b4:	f10a 0a18 	add.w	sl, sl, #24
 80038b8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80038bc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80038c0:	e71f      	b.n	8003702 <__kernel_rem_pio2+0x2a2>
 80038c2:	4630      	mov	r0, r6
 80038c4:	4639      	mov	r1, r7
 80038c6:	f7fc fff5 	bl	80008b4 <__aeabi_d2iz>
 80038ca:	ab0c      	add	r3, sp, #48	; 0x30
 80038cc:	4625      	mov	r5, r4
 80038ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80038d2:	e716      	b.n	8003702 <__kernel_rem_pio2+0x2a2>
 80038d4:	ab0c      	add	r3, sp, #48	; 0x30
 80038d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80038da:	f7fc fef9 	bl	80006d0 <__aeabi_i2d>
 80038de:	4632      	mov	r2, r6
 80038e0:	463b      	mov	r3, r7
 80038e2:	f7fc fc79 	bl	80001d8 <__aeabi_dmul>
 80038e6:	4642      	mov	r2, r8
 80038e8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80038ec:	464b      	mov	r3, r9
 80038ee:	4630      	mov	r0, r6
 80038f0:	4639      	mov	r1, r7
 80038f2:	f7fc fc71 	bl	80001d8 <__aeabi_dmul>
 80038f6:	3c01      	subs	r4, #1
 80038f8:	4606      	mov	r6, r0
 80038fa:	460f      	mov	r7, r1
 80038fc:	e713      	b.n	8003726 <__kernel_rem_pio2+0x2c6>
 80038fe:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8003902:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8003906:	f7fc fc67 	bl	80001d8 <__aeabi_dmul>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4648      	mov	r0, r9
 8003910:	4651      	mov	r1, sl
 8003912:	f7fc fd91 	bl	8000438 <__adddf3>
 8003916:	3701      	adds	r7, #1
 8003918:	4681      	mov	r9, r0
 800391a:	468a      	mov	sl, r1
 800391c:	9b00      	ldr	r3, [sp, #0]
 800391e:	429f      	cmp	r7, r3
 8003920:	dc02      	bgt.n	8003928 <__kernel_rem_pio2+0x4c8>
 8003922:	9b06      	ldr	r3, [sp, #24]
 8003924:	429f      	cmp	r7, r3
 8003926:	ddea      	ble.n	80038fe <__kernel_rem_pio2+0x49e>
 8003928:	9a06      	ldr	r2, [sp, #24]
 800392a:	ab48      	add	r3, sp, #288	; 0x120
 800392c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8003930:	e9c6 9a00 	strd	r9, sl, [r6]
 8003934:	3c01      	subs	r4, #1
 8003936:	e6fa      	b.n	800372e <__kernel_rem_pio2+0x2ce>
 8003938:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800393a:	2b02      	cmp	r3, #2
 800393c:	dc0b      	bgt.n	8003956 <__kernel_rem_pio2+0x4f6>
 800393e:	2b00      	cmp	r3, #0
 8003940:	dc39      	bgt.n	80039b6 <__kernel_rem_pio2+0x556>
 8003942:	d05d      	beq.n	8003a00 <__kernel_rem_pio2+0x5a0>
 8003944:	9b02      	ldr	r3, [sp, #8]
 8003946:	f003 0007 	and.w	r0, r3, #7
 800394a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800394e:	ecbd 8b02 	vpop	{d8}
 8003952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003956:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003958:	2b03      	cmp	r3, #3
 800395a:	d1f3      	bne.n	8003944 <__kernel_rem_pio2+0x4e4>
 800395c:	9b05      	ldr	r3, [sp, #20]
 800395e:	9500      	str	r5, [sp, #0]
 8003960:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003964:	eb0d 0403 	add.w	r4, sp, r3
 8003968:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800396c:	46a2      	mov	sl, r4
 800396e:	9b00      	ldr	r3, [sp, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f1aa 0a08 	sub.w	sl, sl, #8
 8003976:	dc69      	bgt.n	8003a4c <__kernel_rem_pio2+0x5ec>
 8003978:	46aa      	mov	sl, r5
 800397a:	f1ba 0f01 	cmp.w	sl, #1
 800397e:	f1a4 0408 	sub.w	r4, r4, #8
 8003982:	f300 8083 	bgt.w	8003a8c <__kernel_rem_pio2+0x62c>
 8003986:	9c05      	ldr	r4, [sp, #20]
 8003988:	ab48      	add	r3, sp, #288	; 0x120
 800398a:	441c      	add	r4, r3
 800398c:	2000      	movs	r0, #0
 800398e:	2100      	movs	r1, #0
 8003990:	2d01      	cmp	r5, #1
 8003992:	f300 809a 	bgt.w	8003aca <__kernel_rem_pio2+0x66a>
 8003996:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800399a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800399e:	f1bb 0f00 	cmp.w	fp, #0
 80039a2:	f040 8098 	bne.w	8003ad6 <__kernel_rem_pio2+0x676>
 80039a6:	9b04      	ldr	r3, [sp, #16]
 80039a8:	e9c3 7800 	strd	r7, r8, [r3]
 80039ac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80039b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80039b4:	e7c6      	b.n	8003944 <__kernel_rem_pio2+0x4e4>
 80039b6:	9e05      	ldr	r6, [sp, #20]
 80039b8:	ab48      	add	r3, sp, #288	; 0x120
 80039ba:	441e      	add	r6, r3
 80039bc:	462c      	mov	r4, r5
 80039be:	2000      	movs	r0, #0
 80039c0:	2100      	movs	r1, #0
 80039c2:	2c00      	cmp	r4, #0
 80039c4:	da33      	bge.n	8003a2e <__kernel_rem_pio2+0x5ce>
 80039c6:	f1bb 0f00 	cmp.w	fp, #0
 80039ca:	d036      	beq.n	8003a3a <__kernel_rem_pio2+0x5da>
 80039cc:	4602      	mov	r2, r0
 80039ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80039d2:	9c04      	ldr	r4, [sp, #16]
 80039d4:	e9c4 2300 	strd	r2, r3, [r4]
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80039e0:	f7fc fd28 	bl	8000434 <__aeabi_dsub>
 80039e4:	ae4a      	add	r6, sp, #296	; 0x128
 80039e6:	2401      	movs	r4, #1
 80039e8:	42a5      	cmp	r5, r4
 80039ea:	da29      	bge.n	8003a40 <__kernel_rem_pio2+0x5e0>
 80039ec:	f1bb 0f00 	cmp.w	fp, #0
 80039f0:	d002      	beq.n	80039f8 <__kernel_rem_pio2+0x598>
 80039f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80039f6:	4619      	mov	r1, r3
 80039f8:	9b04      	ldr	r3, [sp, #16]
 80039fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80039fe:	e7a1      	b.n	8003944 <__kernel_rem_pio2+0x4e4>
 8003a00:	9c05      	ldr	r4, [sp, #20]
 8003a02:	ab48      	add	r3, sp, #288	; 0x120
 8003a04:	441c      	add	r4, r3
 8003a06:	2000      	movs	r0, #0
 8003a08:	2100      	movs	r1, #0
 8003a0a:	2d00      	cmp	r5, #0
 8003a0c:	da09      	bge.n	8003a22 <__kernel_rem_pio2+0x5c2>
 8003a0e:	f1bb 0f00 	cmp.w	fp, #0
 8003a12:	d002      	beq.n	8003a1a <__kernel_rem_pio2+0x5ba>
 8003a14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003a18:	4619      	mov	r1, r3
 8003a1a:	9b04      	ldr	r3, [sp, #16]
 8003a1c:	e9c3 0100 	strd	r0, r1, [r3]
 8003a20:	e790      	b.n	8003944 <__kernel_rem_pio2+0x4e4>
 8003a22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003a26:	f7fc fd07 	bl	8000438 <__adddf3>
 8003a2a:	3d01      	subs	r5, #1
 8003a2c:	e7ed      	b.n	8003a0a <__kernel_rem_pio2+0x5aa>
 8003a2e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8003a32:	f7fc fd01 	bl	8000438 <__adddf3>
 8003a36:	3c01      	subs	r4, #1
 8003a38:	e7c3      	b.n	80039c2 <__kernel_rem_pio2+0x562>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	e7c8      	b.n	80039d2 <__kernel_rem_pio2+0x572>
 8003a40:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003a44:	f7fc fcf8 	bl	8000438 <__adddf3>
 8003a48:	3401      	adds	r4, #1
 8003a4a:	e7cd      	b.n	80039e8 <__kernel_rem_pio2+0x588>
 8003a4c:	e9da 8900 	ldrd	r8, r9, [sl]
 8003a50:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8003a54:	9b00      	ldr	r3, [sp, #0]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	4632      	mov	r2, r6
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	4640      	mov	r0, r8
 8003a60:	4649      	mov	r1, r9
 8003a62:	f7fc fce9 	bl	8000438 <__adddf3>
 8003a66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4640      	mov	r0, r8
 8003a70:	4649      	mov	r1, r9
 8003a72:	f7fc fcdf 	bl	8000434 <__aeabi_dsub>
 8003a76:	4632      	mov	r2, r6
 8003a78:	463b      	mov	r3, r7
 8003a7a:	f7fc fcdd 	bl	8000438 <__adddf3>
 8003a7e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003a82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003a86:	ed8a 7b00 	vstr	d7, [sl]
 8003a8a:	e770      	b.n	800396e <__kernel_rem_pio2+0x50e>
 8003a8c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003a90:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8003a94:	4640      	mov	r0, r8
 8003a96:	4632      	mov	r2, r6
 8003a98:	463b      	mov	r3, r7
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	f7fc fccc 	bl	8000438 <__adddf3>
 8003aa0:	e9cd 0100 	strd	r0, r1, [sp]
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4640      	mov	r0, r8
 8003aaa:	4649      	mov	r1, r9
 8003aac:	f7fc fcc2 	bl	8000434 <__aeabi_dsub>
 8003ab0:	4632      	mov	r2, r6
 8003ab2:	463b      	mov	r3, r7
 8003ab4:	f7fc fcc0 	bl	8000438 <__adddf3>
 8003ab8:	ed9d 7b00 	vldr	d7, [sp]
 8003abc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003ac0:	ed84 7b00 	vstr	d7, [r4]
 8003ac4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003ac8:	e757      	b.n	800397a <__kernel_rem_pio2+0x51a>
 8003aca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003ace:	f7fc fcb3 	bl	8000438 <__adddf3>
 8003ad2:	3d01      	subs	r5, #1
 8003ad4:	e75c      	b.n	8003990 <__kernel_rem_pio2+0x530>
 8003ad6:	9b04      	ldr	r3, [sp, #16]
 8003ad8:	9a04      	ldr	r2, [sp, #16]
 8003ada:	601f      	str	r7, [r3, #0]
 8003adc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8003ae0:	605c      	str	r4, [r3, #4]
 8003ae2:	609d      	str	r5, [r3, #8]
 8003ae4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003ae8:	60d3      	str	r3, [r2, #12]
 8003aea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003aee:	6110      	str	r0, [r2, #16]
 8003af0:	6153      	str	r3, [r2, #20]
 8003af2:	e727      	b.n	8003944 <__kernel_rem_pio2+0x4e4>
 8003af4:	41700000 	.word	0x41700000
 8003af8:	3e700000 	.word	0x3e700000
 8003afc:	00000000 	.word	0x00000000

08003b00 <scalbn>:
 8003b00:	b570      	push	{r4, r5, r6, lr}
 8003b02:	ec55 4b10 	vmov	r4, r5, d0
 8003b06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	b999      	cbnz	r1, 8003b38 <scalbn+0x38>
 8003b10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003b14:	4323      	orrs	r3, r4
 8003b16:	d03f      	beq.n	8003b98 <scalbn+0x98>
 8003b18:	4b35      	ldr	r3, [pc, #212]	; (8003bf0 <scalbn+0xf0>)
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	ee10 0a10 	vmov	r0, s0
 8003b20:	2200      	movs	r2, #0
 8003b22:	f7fc fb59 	bl	80001d8 <__aeabi_dmul>
 8003b26:	4b33      	ldr	r3, [pc, #204]	; (8003bf4 <scalbn+0xf4>)
 8003b28:	429e      	cmp	r6, r3
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	460d      	mov	r5, r1
 8003b2e:	da10      	bge.n	8003b52 <scalbn+0x52>
 8003b30:	a327      	add	r3, pc, #156	; (adr r3, 8003bd0 <scalbn+0xd0>)
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	e01f      	b.n	8003b78 <scalbn+0x78>
 8003b38:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003b3c:	4291      	cmp	r1, r2
 8003b3e:	d10c      	bne.n	8003b5a <scalbn+0x5a>
 8003b40:	ee10 2a10 	vmov	r2, s0
 8003b44:	4620      	mov	r0, r4
 8003b46:	4629      	mov	r1, r5
 8003b48:	f7fc fc76 	bl	8000438 <__adddf3>
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	460d      	mov	r5, r1
 8003b50:	e022      	b.n	8003b98 <scalbn+0x98>
 8003b52:	460b      	mov	r3, r1
 8003b54:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003b58:	3936      	subs	r1, #54	; 0x36
 8003b5a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003b5e:	4296      	cmp	r6, r2
 8003b60:	dd0d      	ble.n	8003b7e <scalbn+0x7e>
 8003b62:	2d00      	cmp	r5, #0
 8003b64:	a11c      	add	r1, pc, #112	; (adr r1, 8003bd8 <scalbn+0xd8>)
 8003b66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b6a:	da02      	bge.n	8003b72 <scalbn+0x72>
 8003b6c:	a11c      	add	r1, pc, #112	; (adr r1, 8003be0 <scalbn+0xe0>)
 8003b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b72:	a319      	add	r3, pc, #100	; (adr r3, 8003bd8 <scalbn+0xd8>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	f7fc fb2e 	bl	80001d8 <__aeabi_dmul>
 8003b7c:	e7e6      	b.n	8003b4c <scalbn+0x4c>
 8003b7e:	1872      	adds	r2, r6, r1
 8003b80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003b84:	428a      	cmp	r2, r1
 8003b86:	dcec      	bgt.n	8003b62 <scalbn+0x62>
 8003b88:	2a00      	cmp	r2, #0
 8003b8a:	dd08      	ble.n	8003b9e <scalbn+0x9e>
 8003b8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003b90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003b98:	ec45 4b10 	vmov	d0, r4, r5
 8003b9c:	bd70      	pop	{r4, r5, r6, pc}
 8003b9e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003ba2:	da08      	bge.n	8003bb6 <scalbn+0xb6>
 8003ba4:	2d00      	cmp	r5, #0
 8003ba6:	a10a      	add	r1, pc, #40	; (adr r1, 8003bd0 <scalbn+0xd0>)
 8003ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bac:	dac0      	bge.n	8003b30 <scalbn+0x30>
 8003bae:	a10e      	add	r1, pc, #56	; (adr r1, 8003be8 <scalbn+0xe8>)
 8003bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bb4:	e7bc      	b.n	8003b30 <scalbn+0x30>
 8003bb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003bba:	3236      	adds	r2, #54	; 0x36
 8003bbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003bc0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <scalbn+0xf8>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	e7d5      	b.n	8003b78 <scalbn+0x78>
 8003bcc:	f3af 8000 	nop.w
 8003bd0:	c2f8f359 	.word	0xc2f8f359
 8003bd4:	01a56e1f 	.word	0x01a56e1f
 8003bd8:	8800759c 	.word	0x8800759c
 8003bdc:	7e37e43c 	.word	0x7e37e43c
 8003be0:	8800759c 	.word	0x8800759c
 8003be4:	fe37e43c 	.word	0xfe37e43c
 8003be8:	c2f8f359 	.word	0xc2f8f359
 8003bec:	81a56e1f 	.word	0x81a56e1f
 8003bf0:	43500000 	.word	0x43500000
 8003bf4:	ffff3cb0 	.word	0xffff3cb0
 8003bf8:	3c900000 	.word	0x3c900000
 8003bfc:	00000000 	.word	0x00000000

08003c00 <floor>:
 8003c00:	ec51 0b10 	vmov	r0, r1, d0
 8003c04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c0c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8003c10:	2e13      	cmp	r6, #19
 8003c12:	ee10 5a10 	vmov	r5, s0
 8003c16:	ee10 8a10 	vmov	r8, s0
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	dc31      	bgt.n	8003c82 <floor+0x82>
 8003c1e:	2e00      	cmp	r6, #0
 8003c20:	da14      	bge.n	8003c4c <floor+0x4c>
 8003c22:	a333      	add	r3, pc, #204	; (adr r3, 8003cf0 <floor+0xf0>)
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	f7fc fc06 	bl	8000438 <__adddf3>
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f7fc fe36 	bl	80008a0 <__aeabi_dcmpgt>
 8003c34:	b138      	cbz	r0, 8003c46 <floor+0x46>
 8003c36:	2c00      	cmp	r4, #0
 8003c38:	da53      	bge.n	8003ce2 <floor+0xe2>
 8003c3a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003c3e:	4325      	orrs	r5, r4
 8003c40:	d052      	beq.n	8003ce8 <floor+0xe8>
 8003c42:	4c2d      	ldr	r4, [pc, #180]	; (8003cf8 <floor+0xf8>)
 8003c44:	2500      	movs	r5, #0
 8003c46:	4621      	mov	r1, r4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	e024      	b.n	8003c96 <floor+0x96>
 8003c4c:	4f2b      	ldr	r7, [pc, #172]	; (8003cfc <floor+0xfc>)
 8003c4e:	4137      	asrs	r7, r6
 8003c50:	ea01 0307 	and.w	r3, r1, r7
 8003c54:	4303      	orrs	r3, r0
 8003c56:	d01e      	beq.n	8003c96 <floor+0x96>
 8003c58:	a325      	add	r3, pc, #148	; (adr r3, 8003cf0 <floor+0xf0>)
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f7fc fbeb 	bl	8000438 <__adddf3>
 8003c62:	2200      	movs	r2, #0
 8003c64:	2300      	movs	r3, #0
 8003c66:	f7fc fe1b 	bl	80008a0 <__aeabi_dcmpgt>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	d0eb      	beq.n	8003c46 <floor+0x46>
 8003c6e:	2c00      	cmp	r4, #0
 8003c70:	bfbe      	ittt	lt
 8003c72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003c76:	4133      	asrlt	r3, r6
 8003c78:	18e4      	addlt	r4, r4, r3
 8003c7a:	ea24 0407 	bic.w	r4, r4, r7
 8003c7e:	2500      	movs	r5, #0
 8003c80:	e7e1      	b.n	8003c46 <floor+0x46>
 8003c82:	2e33      	cmp	r6, #51	; 0x33
 8003c84:	dd0b      	ble.n	8003c9e <floor+0x9e>
 8003c86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003c8a:	d104      	bne.n	8003c96 <floor+0x96>
 8003c8c:	ee10 2a10 	vmov	r2, s0
 8003c90:	460b      	mov	r3, r1
 8003c92:	f7fc fbd1 	bl	8000438 <__adddf3>
 8003c96:	ec41 0b10 	vmov	d0, r0, r1
 8003c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c9e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8003ca2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003ca6:	40df      	lsrs	r7, r3
 8003ca8:	4238      	tst	r0, r7
 8003caa:	d0f4      	beq.n	8003c96 <floor+0x96>
 8003cac:	a310      	add	r3, pc, #64	; (adr r3, 8003cf0 <floor+0xf0>)
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f7fc fbc1 	bl	8000438 <__adddf3>
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f7fc fdf1 	bl	80008a0 <__aeabi_dcmpgt>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d0c1      	beq.n	8003c46 <floor+0x46>
 8003cc2:	2c00      	cmp	r4, #0
 8003cc4:	da0a      	bge.n	8003cdc <floor+0xdc>
 8003cc6:	2e14      	cmp	r6, #20
 8003cc8:	d101      	bne.n	8003cce <floor+0xce>
 8003cca:	3401      	adds	r4, #1
 8003ccc:	e006      	b.n	8003cdc <floor+0xdc>
 8003cce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	40b3      	lsls	r3, r6
 8003cd6:	441d      	add	r5, r3
 8003cd8:	45a8      	cmp	r8, r5
 8003cda:	d8f6      	bhi.n	8003cca <floor+0xca>
 8003cdc:	ea25 0507 	bic.w	r5, r5, r7
 8003ce0:	e7b1      	b.n	8003c46 <floor+0x46>
 8003ce2:	2500      	movs	r5, #0
 8003ce4:	462c      	mov	r4, r5
 8003ce6:	e7ae      	b.n	8003c46 <floor+0x46>
 8003ce8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003cec:	e7ab      	b.n	8003c46 <floor+0x46>
 8003cee:	bf00      	nop
 8003cf0:	8800759c 	.word	0x8800759c
 8003cf4:	7e37e43c 	.word	0x7e37e43c
 8003cf8:	bff00000 	.word	0xbff00000
 8003cfc:	000fffff 	.word	0x000fffff

08003d00 <_init>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr

08003d0c <_fini>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	bf00      	nop
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr
